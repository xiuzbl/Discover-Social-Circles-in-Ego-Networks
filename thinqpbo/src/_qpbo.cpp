/* Generated by Cython 0.29.17 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "thinqpbo/src/core/QPBO.h"
        ],
        "include_dirs": [
            "thinqpbo/src"
        ],
        "language": "c++",
        "name": "thinqpbo._qpbo",
        "sources": [
            "thinqpbo/src/_qpbo.pyx",
            "thinqpbo/src/core/QPBO.cpp",
            "thinqpbo/src/core/QPBO_extra.cpp",
            "thinqpbo/src/core/QPBO_maxflow.cpp",
            "thinqpbo/src/core/QPBO_postprocessing.cpp"
        ]
    },
    "module_name": "thinqpbo._qpbo"
}
END: Cython Metadata */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_17"
#define CYTHON_HEX_VERSION 0x001D11F0
#define CYTHON_FUTURE_DIVISION 0
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : (Py_INCREF(func), func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__thinqpbo___qpbo
#define __PYX_HAVE_API__thinqpbo___qpbo
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "core/QPBO.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "stringsource",
  "thinqpbo/src/_qpbo.pyx",
};

/* "src/_qpbo.pxd":6
 * from libcpp cimport bool
 * 
 * ctypedef int NodeId;             # <<<<<<<<<<<<<<
 * ctypedef long long EdgeId;
 * 
 */
typedef int __pyx_t_8thinqpbo_3src_5_qpbo_NodeId;

/* "src/_qpbo.pxd":7
 * 
 * ctypedef int NodeId;
 * ctypedef long long EdgeId;             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "core/QPBO.h":
 */
typedef PY_LONG_LONG __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId;

/*--- Type declarations ---*/
struct PyObject_QPBOInt;
struct PyObject_QPBOFloat;
struct PyObject_QPBODouble;

/* "thinqpbo/src/_qpbo.pyx":6
 * 
 * 
 * cdef public class QPBOInt[object PyObject_QPBOInt, type QPBOInt]:             # <<<<<<<<<<<<<<
 *     cdef QPBO[int]* c_qpbo
 * 
 */
struct PyObject_QPBOInt {
  PyObject_HEAD
  QPBO<int>  *c_qpbo;
};

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) QPBOInt;

/* "thinqpbo/src/_qpbo.pyx":194
 * 
 * 
 * cdef public class QPBOFloat[object PyObject_QPBOFloat, type QPBOFloat]:             # <<<<<<<<<<<<<<
 *     cdef QPBO[float]* c_qpbo
 * 
 */
struct PyObject_QPBOFloat {
  PyObject_HEAD
  QPBO<float>  *c_qpbo;
};

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) QPBOFloat;

/* "thinqpbo/src/_qpbo.pyx":380
 * 
 * 
 * cdef public class QPBODouble[object PyObject_QPBODouble, type QPBODouble]:             # <<<<<<<<<<<<<<
 *     cdef QPBO[double]* c_qpbo
 * 
 */
struct PyObject_QPBODouble {
  PyObject_HEAD
  QPBO<double>  *c_qpbo;
};

__PYX_EXTERN_C DL_EXPORT(PyTypeObject) QPBODouble;

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'thinqpbo.src._qpbo' */

/* Module declarations from 'thinqpbo._qpbo' */
static PyTypeObject *__pyx_ptype_8thinqpbo_5_qpbo_QPBOInt = 0;
static PyTypeObject *__pyx_ptype_8thinqpbo_5_qpbo_QPBOFloat = 0;
static PyTypeObject *__pyx_ptype_8thinqpbo_5_qpbo_QPBODouble = 0;
#define __Pyx_MODULE_NAME "thinqpbo._qpbo"
extern int __pyx_module_is_main_thinqpbo___qpbo;
int __pyx_module_is_main_thinqpbo___qpbo = 0;

/* Implementation of 'thinqpbo._qpbo' */
static PyObject *__pyx_builtin_TypeError;
static const char __pyx_k_e[] = "e";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_l[] = "l";
static const char __pyx_k_E0[] = "E0";
static const char __pyx_k_E1[] = "E1";
static const char __pyx_k_E00[] = "E00";
static const char __pyx_k_E01[] = "E01";
static const char __pyx_k_E10[] = "E10";
static const char __pyx_k_E11[] = "E11";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_UTF_8[] = "UTF-8";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_option[] = "option";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_QPBOInt[] = "QPBOInt";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_QPBOFloat[] = "QPBOFloat";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_QPBODouble[] = "QPBODouble";
static const char __pyx_k_edge_num_max[] = "edge_num_max";
static const char __pyx_k_node_num_max[] = "node_num_max";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static PyObject *__pyx_n_s_E0;
static PyObject *__pyx_n_s_E00;
static PyObject *__pyx_n_s_E01;
static PyObject *__pyx_n_s_E1;
static PyObject *__pyx_n_s_E10;
static PyObject *__pyx_n_s_E11;
static PyObject *__pyx_n_s_QPBODouble;
static PyObject *__pyx_n_s_QPBOFloat;
static PyObject *__pyx_n_s_QPBOInt;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_UTF_8;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_edge_num_max;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
static PyObject *__pyx_n_s_node_num_max;
static PyObject *__pyx_n_s_option;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_test;
static int __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt___cinit__(struct PyObject_QPBOInt *__pyx_v_self, int __pyx_v_node_num_max, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_edge_num_max); /* proto */
static void __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_2__dealloc__(struct PyObject_QPBOInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_4save(struct PyObject_QPBOInt *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_6load(struct PyObject_QPBOInt *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_8reset(struct PyObject_QPBOInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_10add_node(struct PyObject_QPBOInt *__pyx_v_self, int __pyx_v_num); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_12add_unary_term(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, int __pyx_v_E0, int __pyx_v_E1); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_14add_pairwise_term(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, int __pyx_v_E00, int __pyx_v_E01, int __pyx_v_E10, int __pyx_v_E11); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_16modify_pairwise_term(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, int __pyx_v_E00, int __pyx_v_E01, int __pyx_v_E10, int __pyx_v_E11); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_18merge_parallel_edges(struct PyObject_QPBOInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_20get_label(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_22setlabel(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, int __pyx_v_l); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_24get_node_num(struct PyObject_QPBOInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_26get_twice_unary_term(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_28get_twice_pairwise_term(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_30compute_twice_energy(struct PyObject_QPBOInt *__pyx_v_self, int __pyx_v_option); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_32compute_twice_lower_bound(struct PyObject_QPBOInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_34solve(struct PyObject_QPBOInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_36compute_weak_persistencies(struct PyObject_QPBOInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_38stitch(struct PyObject_QPBOInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_40improve(struct PyObject_QPBOInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_42__reduce_cython__(CYTHON_UNUSED struct PyObject_QPBOInt *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_44__setstate_cython__(CYTHON_UNUSED struct PyObject_QPBOInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat___cinit__(struct PyObject_QPBOFloat *__pyx_v_self, int __pyx_v_node_num_max, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_edge_num_max); /* proto */
static void __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_2__dealloc__(struct PyObject_QPBOFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_4save(struct PyObject_QPBOFloat *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_6load(struct PyObject_QPBOFloat *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_8reset(struct PyObject_QPBOFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_10add_node(struct PyObject_QPBOFloat *__pyx_v_self, int __pyx_v_num); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_12add_unary_term(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, float __pyx_v_E0, float __pyx_v_E1); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_14add_pairwise_term(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, float __pyx_v_E00, float __pyx_v_E01, float __pyx_v_E10, float __pyx_v_E11); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_16modify_pairwise_term(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, float __pyx_v_E00, float __pyx_v_E01, float __pyx_v_E10, float __pyx_v_E11); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_18merge_parallel_edges(struct PyObject_QPBOFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_20get_label(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_22get_node_num(struct PyObject_QPBOFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_24get_twice_unary_term(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_26get_twice_pairwise_term(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_28compute_twice_energy(struct PyObject_QPBOFloat *__pyx_v_self, int __pyx_v_option); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_30compute_twice_lower_bound(struct PyObject_QPBOFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_32solve(struct PyObject_QPBOFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_34compute_weak_persistencies(struct PyObject_QPBOFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_36stitch(struct PyObject_QPBOFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_38improve(struct PyObject_QPBOFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_40__reduce_cython__(CYTHON_UNUSED struct PyObject_QPBOFloat *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_42__setstate_cython__(CYTHON_UNUSED struct PyObject_QPBOFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble___cinit__(struct PyObject_QPBODouble *__pyx_v_self, int __pyx_v_node_num_max, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_edge_num_max); /* proto */
static void __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_2__dealloc__(struct PyObject_QPBODouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_4save(struct PyObject_QPBODouble *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_6load(struct PyObject_QPBODouble *__pyx_v_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_8reset(struct PyObject_QPBODouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_10add_node(struct PyObject_QPBODouble *__pyx_v_self, int __pyx_v_num); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_12add_unary_term(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, double __pyx_v_E0, double __pyx_v_E1); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_14add_pairwise_term(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, double __pyx_v_E00, double __pyx_v_E01, double __pyx_v_E10, double __pyx_v_E11); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_16modify_pairwise_term(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, double __pyx_v_E00, double __pyx_v_E01, double __pyx_v_E10, double __pyx_v_E11); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_18merge_parallel_edges(struct PyObject_QPBODouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_20get_label(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_22get_node_num(struct PyObject_QPBODouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_24get_twice_unary_term(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_26get_twice_pairwise_term(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_28compute_twice_energy(struct PyObject_QPBODouble *__pyx_v_self, int __pyx_v_option); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_30compute_twice_lower_bound(struct PyObject_QPBODouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_32solve(struct PyObject_QPBODouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_34compute_weak_persistencies(struct PyObject_QPBODouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_36stitch(struct PyObject_QPBODouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_38improve(struct PyObject_QPBODouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_40__reduce_cython__(CYTHON_UNUSED struct PyObject_QPBODouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_42__setstate_cython__(CYTHON_UNUSED struct PyObject_QPBODouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_8thinqpbo_5_qpbo_QPBOInt(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8thinqpbo_5_qpbo_QPBOFloat(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_8thinqpbo_5_qpbo_QPBODouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
/* Late includes */

/* "thinqpbo/src/_qpbo.pyx":9
 *     cdef QPBO[int]* c_qpbo
 * 
 *     def __cinit__(self, int node_num_max=0, EdgeId edge_num_max=0):             # <<<<<<<<<<<<<<
 *         """Constructor.
 *         The first argument gives an estimate of the maximum number of nodes that can be added
 */

/* Python wrapper */
static int __pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_node_num_max;
  __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_edge_num_max;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node_num_max,&__pyx_n_s_edge_num_max,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node_num_max);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge_num_max);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 9, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_node_num_max = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_node_num_max == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 9, __pyx_L3_error)
    } else {
      __pyx_v_node_num_max = ((int)0);
    }
    if (values[1]) {
      __pyx_v_edge_num_max = __Pyx_PyInt_As_PY_LONG_LONG(values[1]); if (unlikely((__pyx_v_edge_num_max == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(1, 9, __pyx_L3_error)
    } else {
      __pyx_v_edge_num_max = ((__pyx_t_8thinqpbo_3src_5_qpbo_EdgeId)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 9, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt___cinit__(((struct PyObject_QPBOInt *)__pyx_v_self), __pyx_v_node_num_max, __pyx_v_edge_num_max);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt___cinit__(struct PyObject_QPBOInt *__pyx_v_self, int __pyx_v_node_num_max, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_edge_num_max) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  QPBO<int>  *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "thinqpbo/src/_qpbo.pyx":27
 *         a larger value of edge_num_max (e.g. twice the number of edges in the original energy).
 *         """
 *         self.c_qpbo = new QPBO[int](node_num_max, edge_num_max)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new QPBO<int> (__pyx_v_node_num_max, __pyx_v_edge_num_max);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 27, __pyx_L1_error)
  }
  __pyx_v_self->c_qpbo = __pyx_t_1;

  /* "thinqpbo/src/_qpbo.pyx":9
 *     cdef QPBO[int]* c_qpbo
 * 
 *     def __cinit__(self, int node_num_max=0, EdgeId edge_num_max=0):             # <<<<<<<<<<<<<<
 *         """Constructor.
 *         The first argument gives an estimate of the maximum number of nodes that can be added
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":29
 *         self.c_qpbo = new QPBO[int](node_num_max, edge_num_max)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Destructor
 *         """
 */

/* Python wrapper */
static void __pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_2__dealloc__(((struct PyObject_QPBOInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_2__dealloc__(struct PyObject_QPBOInt *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "thinqpbo/src/_qpbo.pyx":32
 *         """Destructor
 *         """
 *         del self.c_qpbo             # <<<<<<<<<<<<<<
 * 
 *     def save(self, filename):
 */
  delete __pyx_v_self->c_qpbo;

  /* "thinqpbo/src/_qpbo.pyx":29
 *         self.c_qpbo = new QPBO[int](node_num_max, edge_num_max)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Destructor
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "thinqpbo/src/_qpbo.pyx":34
 *         del self.c_qpbo
 * 
 *     def save(self, filename):             # <<<<<<<<<<<<<<
 *         """Save current reparameterisation of the energy to a text file. (Note: possibly twice the energy is saved).
 * 	    Returns true if success, false otherwise.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_5save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_4save[] = "Save current reparameterisation of the energy to a text file. (Note: possibly twice the energy is saved).\n\t    Returns true if success, false otherwise.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_5save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_4save(((struct PyObject_QPBOInt *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_4save(struct PyObject_QPBOInt *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_bytes = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("save", 0);

  /* "thinqpbo/src/_qpbo.pyx":38
 * 	    Returns true if success, false otherwise.
 *         """
 *         filename_bytes = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.Save(filename_bytes)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_bytes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "thinqpbo/src/_qpbo.pyx":39
 *         """
 *         filename_bytes = filename.encode('UTF-8')
 *         return self.c_qpbo.Save(filename_bytes)             # <<<<<<<<<<<<<<
 * 
 *     def load(self, filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_bytes); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 39, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->c_qpbo->Save(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":34
 *         del self.c_qpbo
 * 
 *     def save(self, filename):             # <<<<<<<<<<<<<<
 *         """Save current reparameterisation of the energy to a text file. (Note: possibly twice the energy is saved).
 * 	    Returns true if success, false otherwise.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_bytes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":41
 *         return self.c_qpbo.Save(filename_bytes)
 * 
 *     def load(self, filename):             # <<<<<<<<<<<<<<
 *         """Load energy from a text file. Current terms of the energy (if any) are destroyed.
 *         Type identifier in the file (int/float/double) should match the type QPBO::REAL.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_7load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_6load[] = "Load energy from a text file. Current terms of the energy (if any) are destroyed.\n        Type identifier in the file (int/float/double) should match the type QPBO::REAL.\n\t    Returns true if success, false otherwise.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_7load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_6load(((struct PyObject_QPBOInt *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_6load(struct PyObject_QPBOInt *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_bytes = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("load", 0);

  /* "thinqpbo/src/_qpbo.pyx":46
 * 	    Returns true if success, false otherwise.
 *         """
 *         filename_bytes = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.Load(filename_bytes)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_bytes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "thinqpbo/src/_qpbo.pyx":47
 *         """
 *         filename_bytes = filename.encode('UTF-8')
 *         return self.c_qpbo.Load(filename_bytes)             # <<<<<<<<<<<<<<
 * 
 *     def reset(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_bytes); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 47, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->c_qpbo->Load(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":41
 *         return self.c_qpbo.Save(filename_bytes)
 * 
 *     def load(self, filename):             # <<<<<<<<<<<<<<
 *         """Load energy from a text file. Current terms of the energy (if any) are destroyed.
 *         Type identifier in the file (int/float/double) should match the type QPBO::REAL.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_bytes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":49
 *         return self.c_qpbo.Load(filename_bytes)
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         """Removes all nodes and edges.
 *         After that functions AddNode(), AddUnaryTerm(), AddPairwiseTerm() must be called again.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_9reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_8reset[] = "Removes all nodes and edges.\n        After that functions AddNode(), AddUnaryTerm(), AddPairwiseTerm() must be called again.\n\n        Advantage compared to deleting QPBO and allocating it again:\n        no calls to delete/new (which could be quite slow).\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_9reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_8reset(((struct PyObject_QPBOInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_8reset(struct PyObject_QPBOInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset", 0);

  /* "thinqpbo/src/_qpbo.pyx":56
 *         no calls to delete/new (which could be quite slow).
 *         """
 *         self.c_qpbo.Reset()             # <<<<<<<<<<<<<<
 * 
 *     def add_node(self, int num):
 */
  __pyx_v_self->c_qpbo->Reset();

  /* "thinqpbo/src/_qpbo.pyx":49
 *         return self.c_qpbo.Load(filename_bytes)
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         """Removes all nodes and edges.
 *         After that functions AddNode(), AddUnaryTerm(), AddPairwiseTerm() must be called again.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":58
 *         self.c_qpbo.Reset()
 * 
 *     def add_node(self, int num):             # <<<<<<<<<<<<<<
 *         """Adds node(s) to the graph. By default, one node is added (num=1); then first call returns 0, second call returns 1, and so on.
 *         If num>1, then several nodes are added, and NodeId of the first one is returned.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_11add_node(PyObject *__pyx_v_self, PyObject *__pyx_arg_num); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_10add_node[] = "Adds node(s) to the graph. By default, one node is added (num=1); then first call returns 0, second call returns 1, and so on.\n        If num>1, then several nodes are added, and NodeId of the first one is returned.\n        IMPORTANT: see note about the constructor\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_11add_node(PyObject *__pyx_v_self, PyObject *__pyx_arg_num) {
  int __pyx_v_num;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_node (wrapper)", 0);
  assert(__pyx_arg_num); {
    __pyx_v_num = __Pyx_PyInt_As_int(__pyx_arg_num); if (unlikely((__pyx_v_num == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 58, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_10add_node(((struct PyObject_QPBOInt *)__pyx_v_self), ((int)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_10add_node(struct PyObject_QPBOInt *__pyx_v_self, int __pyx_v_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_node", 0);

  /* "thinqpbo/src/_qpbo.pyx":63
 *         IMPORTANT: see note about the constructor
 *         """
 *         return self.c_qpbo.AddNode(num)             # <<<<<<<<<<<<<<
 * 
 *     def add_unary_term(self, NodeId i, int E0, int E1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_qpbo->AddNode(__pyx_v_num)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":58
 *         self.c_qpbo.Reset()
 * 
 *     def add_node(self, int num):             # <<<<<<<<<<<<<<
 *         """Adds node(s) to the graph. By default, one node is added (num=1); then first call returns 0, second call returns 1, and so on.
 *         If num>1, then several nodes are added, and NodeId of the first one is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":65
 *         return self.c_qpbo.AddNode(num)
 * 
 *     def add_unary_term(self, NodeId i, int E0, int E1):             # <<<<<<<<<<<<<<
 *         """Adds unary term Ei(x_i) to the energy function with cost values Ei(0)=E0, Ei(1)=E1.
 * 	    Can be called multiple times for each node.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_13add_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_12add_unary_term[] = "Adds unary term Ei(x_i) to the energy function with cost values Ei(0)=E0, Ei(1)=E1.\n\t    Can be called multiple times for each node.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_13add_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  int __pyx_v_E0;
  int __pyx_v_E1;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_unary_term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_E0,&__pyx_n_s_E1,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_unary_term", 1, 3, 3, 1); __PYX_ERR(1, 65, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_unary_term", 1, 3, 3, 2); __PYX_ERR(1, 65, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_unary_term") < 0)) __PYX_ERR(1, 65, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 65, __pyx_L3_error)
    __pyx_v_E0 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_E0 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 65, __pyx_L3_error)
    __pyx_v_E1 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_E1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 65, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_unary_term", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 65, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.add_unary_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_12add_unary_term(((struct PyObject_QPBOInt *)__pyx_v_self), __pyx_v_i, __pyx_v_E0, __pyx_v_E1);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_12add_unary_term(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, int __pyx_v_E0, int __pyx_v_E1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_unary_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":69
 * 	    Can be called multiple times for each node.
 *         """
 *         self.c_qpbo.AddUnaryTerm(i, E0, E1)             # <<<<<<<<<<<<<<
 * 
 *     def add_pairwise_term(self, NodeId i, NodeId j, int E00, int E01, int E10, int E11):
 */
  __pyx_v_self->c_qpbo->AddUnaryTerm(__pyx_v_i, __pyx_v_E0, __pyx_v_E1);

  /* "thinqpbo/src/_qpbo.pyx":65
 *         return self.c_qpbo.AddNode(num)
 * 
 *     def add_unary_term(self, NodeId i, int E0, int E1):             # <<<<<<<<<<<<<<
 *         """Adds unary term Ei(x_i) to the energy function with cost values Ei(0)=E0, Ei(1)=E1.
 * 	    Can be called multiple times for each node.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":71
 *         self.c_qpbo.AddUnaryTerm(i, E0, E1)
 * 
 *     def add_pairwise_term(self, NodeId i, NodeId j, int E00, int E01, int E10, int E11):             # <<<<<<<<<<<<<<
 *         """Adds pairwise term Eij(x_i, x_j) with cost values E00, E01, E10, E11.
 * 	    IMPORTANT: see note about the constructor
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_15add_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_14add_pairwise_term[] = "Adds pairwise term Eij(x_i, x_j) with cost values E00, E01, E10, E11.\n\t    IMPORTANT: see note about the constructor \n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_15add_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j;
  int __pyx_v_E00;
  int __pyx_v_E01;
  int __pyx_v_E10;
  int __pyx_v_E11;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_pairwise_term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_j,&__pyx_n_s_E00,&__pyx_n_s_E01,&__pyx_n_s_E10,&__pyx_n_s_E11,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 1); __PYX_ERR(1, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E00)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 2); __PYX_ERR(1, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E01)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 3); __PYX_ERR(1, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E10)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 4); __PYX_ERR(1, 71, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E11)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 5); __PYX_ERR(1, 71, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_pairwise_term") < 0)) __PYX_ERR(1, 71, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 71, __pyx_L3_error)
    __pyx_v_j = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 71, __pyx_L3_error)
    __pyx_v_E00 = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_E00 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 71, __pyx_L3_error)
    __pyx_v_E01 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_E01 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 71, __pyx_L3_error)
    __pyx_v_E10 = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_E10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 71, __pyx_L3_error)
    __pyx_v_E11 = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_E11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 71, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 71, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.add_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_14add_pairwise_term(((struct PyObject_QPBOInt *)__pyx_v_self), __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_14add_pairwise_term(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, int __pyx_v_E00, int __pyx_v_E01, int __pyx_v_E10, int __pyx_v_E11) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_pairwise_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":75
 * 	    IMPORTANT: see note about the constructor
 *         """
 *         return self.c_qpbo.AddPairwiseTerm(i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 * 
 *     def modify_pairwise_term(self, EdgeId e, NodeId i, NodeId j, int E00, int E01, int E10, int E11):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->c_qpbo->AddPairwiseTerm(__pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":71
 *         self.c_qpbo.AddUnaryTerm(i, E0, E1)
 * 
 *     def add_pairwise_term(self, NodeId i, NodeId j, int E00, int E01, int E10, int E11):             # <<<<<<<<<<<<<<
 *         """Adds pairwise term Eij(x_i, x_j) with cost values E00, E01, E10, E11.
 * 	    IMPORTANT: see note about the constructor
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.add_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":77
 *         return self.c_qpbo.AddPairwiseTerm(i, j, E00, E01, E10, E11)
 * 
 *     def modify_pairwise_term(self, EdgeId e, NodeId i, NodeId j, int E00, int E01, int E10, int E11):             # <<<<<<<<<<<<<<
 *         """This function modifies an already existing pairwise term.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_17modify_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_16modify_pairwise_term[] = "This function modifies an already existing pairwise term.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_17modify_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j;
  int __pyx_v_E00;
  int __pyx_v_E01;
  int __pyx_v_E10;
  int __pyx_v_E11;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modify_pairwise_term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_e,&__pyx_n_s_i,&__pyx_n_s_j,&__pyx_n_s_E00,&__pyx_n_s_E01,&__pyx_n_s_E10,&__pyx_n_s_E11,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 1); __PYX_ERR(1, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 2); __PYX_ERR(1, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E00)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 3); __PYX_ERR(1, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E01)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 4); __PYX_ERR(1, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E10)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 5); __PYX_ERR(1, 77, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E11)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 6); __PYX_ERR(1, 77, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "modify_pairwise_term") < 0)) __PYX_ERR(1, 77, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_e = __Pyx_PyInt_As_PY_LONG_LONG(values[0]); if (unlikely((__pyx_v_e == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(1, 77, __pyx_L3_error)
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 77, __pyx_L3_error)
    __pyx_v_j = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 77, __pyx_L3_error)
    __pyx_v_E00 = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_E00 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 77, __pyx_L3_error)
    __pyx_v_E01 = __Pyx_PyInt_As_int(values[4]); if (unlikely((__pyx_v_E01 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 77, __pyx_L3_error)
    __pyx_v_E10 = __Pyx_PyInt_As_int(values[5]); if (unlikely((__pyx_v_E10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 77, __pyx_L3_error)
    __pyx_v_E11 = __Pyx_PyInt_As_int(values[6]); if (unlikely((__pyx_v_E11 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 77, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 77, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.modify_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_16modify_pairwise_term(((struct PyObject_QPBOInt *)__pyx_v_self), __pyx_v_e, __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_16modify_pairwise_term(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, int __pyx_v_E00, int __pyx_v_E01, int __pyx_v_E10, int __pyx_v_E11) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modify_pairwise_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":80
 *         """This function modifies an already existing pairwise term.
 *         """
 *         self.c_qpbo.AddPairwiseTerm(e, i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 * 
 *     def merge_parallel_edges(self):
 */
  __pyx_v_self->c_qpbo->AddPairwiseTerm(__pyx_v_e, __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* "thinqpbo/src/_qpbo.pyx":77
 *         return self.c_qpbo.AddPairwiseTerm(i, j, E00, E01, E10, E11)
 * 
 *     def modify_pairwise_term(self, EdgeId e, NodeId i, NodeId j, int E00, int E01, int E10, int E11):             # <<<<<<<<<<<<<<
 *         """This function modifies an already existing pairwise term.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":82
 *         self.c_qpbo.AddPairwiseTerm(e, i, j, E00, E01, E10, E11)
 * 
 *     def merge_parallel_edges(self):             # <<<<<<<<<<<<<<
 *         """If AddPairwiseTerm(i,j,...) has been called twice for some pairs of nodes,
 *         then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_19merge_parallel_edges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_18merge_parallel_edges[] = "If AddPairwiseTerm(i,j,...) has been called twice for some pairs of nodes,\n        then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_19merge_parallel_edges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge_parallel_edges (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_18merge_parallel_edges(((struct PyObject_QPBOInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_18merge_parallel_edges(struct PyObject_QPBOInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge_parallel_edges", 0);

  /* "thinqpbo/src/_qpbo.pyx":86
 *         then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().
 *         """
 *         self.c_qpbo.MergeParallelEdges()             # <<<<<<<<<<<<<<
 * 
 *     def get_label(self, NodeId i):
 */
  __pyx_v_self->c_qpbo->MergeParallelEdges();

  /* "thinqpbo/src/_qpbo.pyx":82
 *         self.c_qpbo.AddPairwiseTerm(e, i, j, E00, E01, E10, E11)
 * 
 *     def merge_parallel_edges(self):             # <<<<<<<<<<<<<<
 *         """If AddPairwiseTerm(i,j,...) has been called twice for some pairs of nodes,
 *         then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":88
 *         self.c_qpbo.MergeParallelEdges()
 * 
 *     def get_label(self, NodeId i):             # <<<<<<<<<<<<<<
 *         """Returns 0 or 1, if the node is labeled, and a negative number otherwise.
 * 	    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_21get_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_20get_label[] = "Returns 0 or 1, if the node is labeled, and a negative number otherwise.\n\t    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_21get_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_label (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 88, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.get_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_20get_label(((struct PyObject_QPBOInt *)__pyx_v_self), ((__pyx_t_8thinqpbo_3src_5_qpbo_NodeId)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_20get_label(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_label", 0);

  /* "thinqpbo/src/_qpbo.pyx":92
 * 	    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().
 *         """
 *         return self.c_qpbo.GetLabel(i)             # <<<<<<<<<<<<<<
 *     def setlabel(self, NodeId i, int l):
 *         self.c_qpbo.SetLabel(i,l)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_qpbo->GetLabel(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":88
 *         self.c_qpbo.MergeParallelEdges()
 * 
 *     def get_label(self, NodeId i):             # <<<<<<<<<<<<<<
 *         """Returns 0 or 1, if the node is labeled, and a negative number otherwise.
 * 	    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.get_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":93
 *         """
 *         return self.c_qpbo.GetLabel(i)
 *     def setlabel(self, NodeId i, int l):             # <<<<<<<<<<<<<<
 *         self.c_qpbo.SetLabel(i,l)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_23setlabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_23setlabel(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  int __pyx_v_l;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setlabel (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_l,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_l)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("setlabel", 1, 2, 2, 1); __PYX_ERR(1, 93, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "setlabel") < 0)) __PYX_ERR(1, 93, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 93, __pyx_L3_error)
    __pyx_v_l = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_l == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 93, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("setlabel", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 93, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.setlabel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_22setlabel(((struct PyObject_QPBOInt *)__pyx_v_self), __pyx_v_i, __pyx_v_l);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_22setlabel(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, int __pyx_v_l) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("setlabel", 0);

  /* "thinqpbo/src/_qpbo.pyx":94
 *         return self.c_qpbo.GetLabel(i)
 *     def setlabel(self, NodeId i, int l):
 *         self.c_qpbo.SetLabel(i,l)             # <<<<<<<<<<<<<<
 * 
 *     def get_node_num(self):
 */
  __pyx_v_self->c_qpbo->SetLabel(__pyx_v_i, __pyx_v_l);

  /* "thinqpbo/src/_qpbo.pyx":93
 *         """
 *         return self.c_qpbo.GetLabel(i)
 *     def setlabel(self, NodeId i, int l):             # <<<<<<<<<<<<<<
 *         self.c_qpbo.SetLabel(i,l)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":96
 *         self.c_qpbo.SetLabel(i,l)
 * 
 *     def get_node_num(self):             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.GetNodeNum()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_25get_node_num(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_25get_node_num(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node_num (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_24get_node_num(((struct PyObject_QPBOInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_24get_node_num(struct PyObject_QPBOInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_node_num", 0);

  /* "thinqpbo/src/_qpbo.pyx":97
 * 
 *     def get_node_num(self):
 *         return self.c_qpbo.GetNodeNum()             # <<<<<<<<<<<<<<
 * 
 *     def get_twice_unary_term(self, NodeId i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_qpbo->GetNodeNum()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":96
 *         self.c_qpbo.SetLabel(i,l)
 * 
 *     def get_node_num(self):             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.GetNodeNum()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.get_node_num", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":99
 *         return self.c_qpbo.GetNodeNum()
 * 
 *     def get_twice_unary_term(self, NodeId i):             # <<<<<<<<<<<<<<
 *         cdef int E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_27get_twice_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_27get_twice_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_twice_unary_term (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 99, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.get_twice_unary_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_26get_twice_unary_term(((struct PyObject_QPBOInt *)__pyx_v_self), ((__pyx_t_8thinqpbo_3src_5_qpbo_NodeId)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_26get_twice_unary_term(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i) {
  int __pyx_v_E0;
  int __pyx_v_E1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_twice_unary_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":101
 *     def get_twice_unary_term(self, NodeId i):
 *         cdef int E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)             # <<<<<<<<<<<<<<
 *         return (E0, E1)
 * 
 */
  __pyx_v_self->c_qpbo->GetTwiceUnaryTerm(__pyx_v_i, __pyx_v_E0, __pyx_v_E1);

  /* "thinqpbo/src/_qpbo.pyx":102
 *         cdef int E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)
 *         return (E0, E1)             # <<<<<<<<<<<<<<
 * 
 *     def get_twice_pairwise_term(self, EdgeId e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_E0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_E1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":99
 *         return self.c_qpbo.GetNodeNum()
 * 
 *     def get_twice_unary_term(self, NodeId i):             # <<<<<<<<<<<<<<
 *         cdef int E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.get_twice_unary_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":104
 *         return (E0, E1)
 * 
 *     def get_twice_pairwise_term(self, EdgeId e):             # <<<<<<<<<<<<<<
 *         cdef NodeId i, j
 *         cdef int E00, E01, E10, E11
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_29get_twice_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_e); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_29get_twice_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_e) {
  __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_twice_pairwise_term (wrapper)", 0);
  assert(__pyx_arg_e); {
    __pyx_v_e = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_arg_e); if (unlikely((__pyx_v_e == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(1, 104, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.get_twice_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_28get_twice_pairwise_term(((struct PyObject_QPBOInt *)__pyx_v_self), ((__pyx_t_8thinqpbo_3src_5_qpbo_EdgeId)__pyx_v_e));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_28get_twice_pairwise_term(struct PyObject_QPBOInt *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j;
  int __pyx_v_E00;
  int __pyx_v_E01;
  int __pyx_v_E10;
  int __pyx_v_E11;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("get_twice_pairwise_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":107
 *         cdef NodeId i, j
 *         cdef int E00, E01, E10, E11
 *         self.c_qpbo.GetTwicePairwiseTerm(e, i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 *         return (i, j, E00, E01, E10, E11)
 * 
 */
  __pyx_v_self->c_qpbo->GetTwicePairwiseTerm(__pyx_v_e, __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* "thinqpbo/src/_qpbo.pyx":108
 *         cdef int E00, E01, E10, E11
 *         self.c_qpbo.GetTwicePairwiseTerm(e, i, j, E00, E01, E10, E11)
 *         return (i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 * 
 *     def compute_twice_energy(self, int option=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_E00); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_E01); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_E10); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_E11); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":104
 *         return (E0, E1)
 * 
 *     def get_twice_pairwise_term(self, EdgeId e):             # <<<<<<<<<<<<<<
 *         cdef NodeId i, j
 *         cdef int E00, E01, E10, E11
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.get_twice_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":110
 *         return (i, j, E00, E01, E10, E11)
 * 
 *     def compute_twice_energy(self, int option=0):             # <<<<<<<<<<<<<<
 *         """Return energy bound.
 *         NOTE: in the current implementation Probe() may add constants to the energy
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_31compute_twice_energy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_30compute_twice_energy[] = "Return energy bound.\n        NOTE: in the current implementation Probe() may add constants to the energy\n        during transormations, so after Probe() the energy/lower bound would be shifted by some offset.\n\n        option == 0: returns 2 times the energy of internally stored solution which would be\n                    returned by GetLabel(). Negative values (unknown) are treated as 0. \n        option == 1: returns 2 times the energy of solution set by the user (via SetLabel()).\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_31compute_twice_energy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_option;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_twice_energy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_option,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_option);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_twice_energy") < 0)) __PYX_ERR(1, 110, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_option = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_option == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 110, __pyx_L3_error)
    } else {
      __pyx_v_option = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_twice_energy", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 110, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.compute_twice_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_30compute_twice_energy(((struct PyObject_QPBOInt *)__pyx_v_self), __pyx_v_option);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_30compute_twice_energy(struct PyObject_QPBOInt *__pyx_v_self, int __pyx_v_option) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("compute_twice_energy", 0);

  /* "thinqpbo/src/_qpbo.pyx":119
 *         option == 1: returns 2 times the energy of solution set by the user (via SetLabel()).
 *         """
 *         return self.c_qpbo.ComputeTwiceEnergy(option)             # <<<<<<<<<<<<<<
 * 
 *     def compute_twice_lower_bound(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_qpbo->ComputeTwiceEnergy(__pyx_v_option)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":110
 *         return (i, j, E00, E01, E10, E11)
 * 
 *     def compute_twice_energy(self, int option=0):             # <<<<<<<<<<<<<<
 *         """Return energy bound.
 *         NOTE: in the current implementation Probe() may add constants to the energy
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.compute_twice_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":121
 *         return self.c_qpbo.ComputeTwiceEnergy(option)
 * 
 *     def compute_twice_lower_bound(self):             # <<<<<<<<<<<<<<
 *         """Returns the lower bound defined by current reparameterizaion.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_33compute_twice_lower_bound(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_32compute_twice_lower_bound[] = "Returns the lower bound defined by current reparameterizaion.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_33compute_twice_lower_bound(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_twice_lower_bound (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_32compute_twice_lower_bound(((struct PyObject_QPBOInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_32compute_twice_lower_bound(struct PyObject_QPBOInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("compute_twice_lower_bound", 0);

  /* "thinqpbo/src/_qpbo.pyx":124
 *         """Returns the lower bound defined by current reparameterizaion.
 *         """
 *         return self.c_qpbo.ComputeTwiceLowerBound()             # <<<<<<<<<<<<<<
 * 
 *     def solve(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_qpbo->ComputeTwiceLowerBound()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":121
 *         return self.c_qpbo.ComputeTwiceEnergy(option)
 * 
 *     def compute_twice_lower_bound(self):             # <<<<<<<<<<<<<<
 *         """Returns the lower bound defined by current reparameterizaion.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.compute_twice_lower_bound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":126
 *         return self.c_qpbo.ComputeTwiceLowerBound()
 * 
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         """Runs QPBO. After calling Solve(), use GetLabel(i) to get label of node i.
 * 	    Solve() produces a STRONGLY PERSISTENT LABELING. It means, in particular,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_35solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_34solve[] = "Runs QPBO. After calling Solve(), use GetLabel(i) to get label of node i.\n\t    Solve() produces a STRONGLY PERSISTENT LABELING. It means, in particular,\n\t    that if GetLabel(i)>=0 (i.e. node i is labeled) then x_i == GetLabel(i) for ALL global minima x.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_35solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_34solve(((struct PyObject_QPBOInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_34solve(struct PyObject_QPBOInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve", 0);

  /* "thinqpbo/src/_qpbo.pyx":131
 * 	    that if GetLabel(i)>=0 (i.e. node i is labeled) then x_i == GetLabel(i) for ALL global minima x.
 *         """
 *         self.c_qpbo.Solve()             # <<<<<<<<<<<<<<
 * 
 *     def compute_weak_persistencies(self):
 */
  __pyx_v_self->c_qpbo->Solve();

  /* "thinqpbo/src/_qpbo.pyx":126
 *         return self.c_qpbo.ComputeTwiceLowerBound()
 * 
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         """Runs QPBO. After calling Solve(), use GetLabel(i) to get label of node i.
 * 	    Solve() produces a STRONGLY PERSISTENT LABELING. It means, in particular,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":133
 *         self.c_qpbo.Solve()
 * 
 *     def compute_weak_persistencies(self):             # <<<<<<<<<<<<<<
 *         """Can only be called immediately after Solve()/Probe() (and before any modifications are made to the energy).
 *         Computes WEAKLY PERSISTENT LABELING. Use GetLabel() to read the result.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_37compute_weak_persistencies(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_36compute_weak_persistencies[] = "Can only be called immediately after Solve()/Probe() (and before any modifications are made to the energy).\n        Computes WEAKLY PERSISTENT LABELING. Use GetLabel() to read the result.\n        NOTE: if the energy is submodular, then ComputeWeakPersistences() will label all nodes (in general, this is not necessarily true for Solve()).\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_37compute_weak_persistencies(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_weak_persistencies (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_36compute_weak_persistencies(((struct PyObject_QPBOInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_36compute_weak_persistencies(struct PyObject_QPBOInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_weak_persistencies", 0);

  /* "thinqpbo/src/_qpbo.pyx":138
 *         NOTE: if the energy is submodular, then ComputeWeakPersistences() will label all nodes (in general, this is not necessarily true for Solve()).
 *         """
 *         self.c_qpbo.ComputeWeakPersistencies()             # <<<<<<<<<<<<<<
 * 
 *     def stitch(self):
 */
  __pyx_v_self->c_qpbo->ComputeWeakPersistencies();

  /* "thinqpbo/src/_qpbo.pyx":133
 *         self.c_qpbo.Solve()
 * 
 *     def compute_weak_persistencies(self):             # <<<<<<<<<<<<<<
 *         """Can only be called immediately after Solve()/Probe() (and before any modifications are made to the energy).
 *         Computes WEAKLY PERSISTENT LABELING. Use GetLabel() to read the result.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":140
 *         self.c_qpbo.ComputeWeakPersistencies()
 * 
 *     def stitch(self):             # <<<<<<<<<<<<<<
 *         """GetRegion()/Stitch():
 *         ComputeWeakPersistencies() also splits pixels into regions (``strongly connected components'') U^0, U^1, ..., U^k as described in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_39stitch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_38stitch[] = "GetRegion()/Stitch():\n        ComputeWeakPersistencies() also splits pixels into regions (``strongly connected components'') U^0, U^1, ..., U^k as described in\n        \n            A. Billionnet and B. Jaumard. \n            A decomposition method for minimizing quadratic pseudoboolean functions. \n            Operation Research Letters, 8:161\357\277\275163, 1989.\t\n    \n        For a review see also \n    \n            V. Kolmogorov, C. Rother\n            Minimizing non-submodular functions with graph cuts - a review\n            Technical report MSR-TR-2006-100, July 2006. To appear in PAMI.\n    \n        Nodes in U^0 are labeled, nodes in U^1, ..., U^k are unlabeled.\n        (To find out to what region node i belongs, call GetRegion(i)).\n        The user can use these regions as follows:\n        -- For each r=1..k, compute somehow minimum x^r of the energy corresponding to region U^r.\n            This energy can be obtained by calling GetPairwiseTerm() for edges inside the region.\n            (There are no unary terms). Note that computing the global minimum is NP-hard;\n            it is up to the user to decide how to solve this problem.\n        -- Set the labeling by calling SetLabel().\n        -- Call Stitch(). It will compute a complete global minimum (in linear time).\n        -- Call GetLabel() for nodes in U^1, ..., U^k to read new solution.\n        Note that if the user can provides approximate rather than global minima x^r, then the stitching\n        can still be done but the result is not guaranteed to be a *global* minimum.\n    \n        GetRegion()/Stitch() can be called only immediately after ComputeWeakPersistencies().\n        NOTE: Stitch() changes the stored energy!\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_39stitch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stitch (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_38stitch(((struct PyObject_QPBOInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_38stitch(struct PyObject_QPBOInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stitch", 0);

  /* "thinqpbo/src/_qpbo.pyx":170
 *         NOTE: Stitch() changes the stored energy!
 *         """
 *         self.c_qpbo.Stitch()             # <<<<<<<<<<<<<<
 * 
 *     def improve(self):
 */
  __pyx_v_self->c_qpbo->Stitch();

  /* "thinqpbo/src/_qpbo.pyx":140
 *         self.c_qpbo.ComputeWeakPersistencies()
 * 
 *     def stitch(self):             # <<<<<<<<<<<<<<
 *         """GetRegion()/Stitch():
 *         ComputeWeakPersistencies() also splits pixels into regions (``strongly connected components'') U^0, U^1, ..., U^k as described in
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":172
 *         self.c_qpbo.Stitch()
 * 
 *     def improve(self):             # <<<<<<<<<<<<<<
 *         """Tries to improve the labeling provided by the user (via SetLabel()).
 *         The new labeling is guaranteed to have the same or smaller energy than the input labeling.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_41improve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_40improve[] = "Tries to improve the labeling provided by the user (via SetLabel()).\n        The new labeling is guaranteed to have the same or smaller energy than the input labeling.\n        \n        The procedure is as follows:\n        1. Run QBPO\n        2. Go through nodes in the order order_array[0], ..., order_array[N-1].\n            If a node is unlabeled, fix it to the label provided by the user and run QBPO again.\n        3. For remaining unlabeled nodes run set their labels to values provided by the user.\n            (If order_array[] contains all nodes, then there should be no unlabeled nodes in step 3).\n        \n        New labeling can be obtained via GetLabel(). (The procedure also calls SetLabel() with\n        new labels, so Improve() can be called again). Returns true if success \n        (i.e. the labeling has changed and, thus, the energy has decreased), and false otherwise.\n        \n        If array fixed_pixels of size nodeNum is provided, then it is set as follows:\n        fixed_nodes[i] = 1 if node i was fixed during Improve(), and false otherwise.\n        order_array and fixed_pixels can point to the same array.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_41improve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("improve (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_40improve(((struct PyObject_QPBOInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_40improve(struct PyObject_QPBOInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("improve", 0);

  /* "thinqpbo/src/_qpbo.pyx":191
 *         order_array and fixed_pixels can point to the same array.
 *         """
 *         return self.c_qpbo.Improve()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->c_qpbo->Improve()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":172
 *         self.c_qpbo.Stitch()
 * 
 *     def improve(self):             # <<<<<<<<<<<<<<
 *         """Tries to improve the labeling provided by the user (via SetLabel()).
 *         The new labeling is guaranteed to have the same or smaller energy than the input labeling.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.improve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_43__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_43__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_42__reduce_cython__(((struct PyObject_QPBOInt *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_42__reduce_cython__(CYTHON_UNUSED struct PyObject_QPBOInt *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_45__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_45__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_44__setstate_cython__(((struct PyObject_QPBOInt *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_7QPBOInt_44__setstate_cython__(CYTHON_UNUSED struct PyObject_QPBOInt *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOInt.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":197
 *     cdef QPBO[float]* c_qpbo
 * 
 *     def __cinit__(self, int node_num_max=0, EdgeId edge_num_max=0):             # <<<<<<<<<<<<<<
 *         """Constructor.
 *         The first argument gives an estimate of the maximum number of nodes that can be added
 */

/* Python wrapper */
static int __pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_node_num_max;
  __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_edge_num_max;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node_num_max,&__pyx_n_s_edge_num_max,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node_num_max);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge_num_max);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 197, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_node_num_max = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_node_num_max == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 197, __pyx_L3_error)
    } else {
      __pyx_v_node_num_max = ((int)0);
    }
    if (values[1]) {
      __pyx_v_edge_num_max = __Pyx_PyInt_As_PY_LONG_LONG(values[1]); if (unlikely((__pyx_v_edge_num_max == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(1, 197, __pyx_L3_error)
    } else {
      __pyx_v_edge_num_max = ((__pyx_t_8thinqpbo_3src_5_qpbo_EdgeId)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 197, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat___cinit__(((struct PyObject_QPBOFloat *)__pyx_v_self), __pyx_v_node_num_max, __pyx_v_edge_num_max);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat___cinit__(struct PyObject_QPBOFloat *__pyx_v_self, int __pyx_v_node_num_max, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_edge_num_max) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  QPBO<float>  *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "thinqpbo/src/_qpbo.pyx":215
 *         a larger value of edge_num_max (e.g. twice the number of edges in the original energy).
 *         """
 *         self.c_qpbo = new QPBO[float](node_num_max, edge_num_max)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new QPBO<float> (__pyx_v_node_num_max, __pyx_v_edge_num_max);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 215, __pyx_L1_error)
  }
  __pyx_v_self->c_qpbo = __pyx_t_1;

  /* "thinqpbo/src/_qpbo.pyx":197
 *     cdef QPBO[float]* c_qpbo
 * 
 *     def __cinit__(self, int node_num_max=0, EdgeId edge_num_max=0):             # <<<<<<<<<<<<<<
 *         """Constructor.
 *         The first argument gives an estimate of the maximum number of nodes that can be added
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":217
 *         self.c_qpbo = new QPBO[float](node_num_max, edge_num_max)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Destructor
 *         """
 */

/* Python wrapper */
static void __pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_2__dealloc__(((struct PyObject_QPBOFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_2__dealloc__(struct PyObject_QPBOFloat *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "thinqpbo/src/_qpbo.pyx":220
 *         """Destructor
 *         """
 *         del self.c_qpbo             # <<<<<<<<<<<<<<
 * 
 *     def save(self, filename):
 */
  delete __pyx_v_self->c_qpbo;

  /* "thinqpbo/src/_qpbo.pyx":217
 *         self.c_qpbo = new QPBO[float](node_num_max, edge_num_max)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Destructor
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "thinqpbo/src/_qpbo.pyx":222
 *         del self.c_qpbo
 * 
 *     def save(self, filename):             # <<<<<<<<<<<<<<
 *         """Save current reparameterisation of the energy to a text file. (Note: possibly twice the energy is saved).
 * 	    Returns true if success, false otherwise.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_5save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_4save[] = "Save current reparameterisation of the energy to a text file. (Note: possibly twice the energy is saved).\n\t    Returns true if success, false otherwise.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_5save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_4save(((struct PyObject_QPBOFloat *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_4save(struct PyObject_QPBOFloat *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_bytes = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("save", 0);

  /* "thinqpbo/src/_qpbo.pyx":226
 * 	    Returns true if success, false otherwise.
 *         """
 *         filename_bytes = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.Save(filename_bytes)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_bytes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "thinqpbo/src/_qpbo.pyx":227
 *         """
 *         filename_bytes = filename.encode('UTF-8')
 *         return self.c_qpbo.Save(filename_bytes)             # <<<<<<<<<<<<<<
 * 
 *     def load(self, filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_bytes); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 227, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->c_qpbo->Save(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":222
 *         del self.c_qpbo
 * 
 *     def save(self, filename):             # <<<<<<<<<<<<<<
 *         """Save current reparameterisation of the energy to a text file. (Note: possibly twice the energy is saved).
 * 	    Returns true if success, false otherwise.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_bytes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":229
 *         return self.c_qpbo.Save(filename_bytes)
 * 
 *     def load(self, filename):             # <<<<<<<<<<<<<<
 *         """Load energy from a text file. Current terms of the energy (if any) are destroyed.
 *         Type identifier in the file (int/float/double) should match the type QPBO::REAL.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_7load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_6load[] = "Load energy from a text file. Current terms of the energy (if any) are destroyed.\n        Type identifier in the file (int/float/double) should match the type QPBO::REAL.\n\t    Returns true if success, false otherwise.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_7load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_6load(((struct PyObject_QPBOFloat *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_6load(struct PyObject_QPBOFloat *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_bytes = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("load", 0);

  /* "thinqpbo/src/_qpbo.pyx":234
 * 	    Returns true if success, false otherwise.
 *         """
 *         filename_bytes = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.Load(filename_bytes)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_bytes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "thinqpbo/src/_qpbo.pyx":235
 *         """
 *         filename_bytes = filename.encode('UTF-8')
 *         return self.c_qpbo.Load(filename_bytes)             # <<<<<<<<<<<<<<
 * 
 *     def reset(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_bytes); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 235, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->c_qpbo->Load(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":229
 *         return self.c_qpbo.Save(filename_bytes)
 * 
 *     def load(self, filename):             # <<<<<<<<<<<<<<
 *         """Load energy from a text file. Current terms of the energy (if any) are destroyed.
 *         Type identifier in the file (int/float/double) should match the type QPBO::REAL.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_bytes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":237
 *         return self.c_qpbo.Load(filename_bytes)
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         """Removes all nodes and edges.
 *         After that functions AddNode(), AddUnaryTerm(), AddPairwiseTerm() must be called again.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_9reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_8reset[] = "Removes all nodes and edges. \n        After that functions AddNode(), AddUnaryTerm(), AddPairwiseTerm() must be called again. \n        \n        Advantage compared to deleting QPBO and allocating it again:\n        no calls to delete/new (which could be quite slow).\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_9reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_8reset(((struct PyObject_QPBOFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_8reset(struct PyObject_QPBOFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset", 0);

  /* "thinqpbo/src/_qpbo.pyx":244
 *         no calls to delete/new (which could be quite slow).
 *         """
 *         self.c_qpbo.Reset()             # <<<<<<<<<<<<<<
 * 
 *     def add_node(self, int num):
 */
  __pyx_v_self->c_qpbo->Reset();

  /* "thinqpbo/src/_qpbo.pyx":237
 *         return self.c_qpbo.Load(filename_bytes)
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         """Removes all nodes and edges.
 *         After that functions AddNode(), AddUnaryTerm(), AddPairwiseTerm() must be called again.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":246
 *         self.c_qpbo.Reset()
 * 
 *     def add_node(self, int num):             # <<<<<<<<<<<<<<
 *         """Adds node(s) to the graph. By default, one node is added (num=1); then first call returns 0, second call returns 1, and so on.
 *         If num>1, then several nodes are added, and NodeId of the first one is returned.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_11add_node(PyObject *__pyx_v_self, PyObject *__pyx_arg_num); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_10add_node[] = "Adds node(s) to the graph. By default, one node is added (num=1); then first call returns 0, second call returns 1, and so on. \n        If num>1, then several nodes are added, and NodeId of the first one is returned.\n        IMPORTANT: see note about the constructor \n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_11add_node(PyObject *__pyx_v_self, PyObject *__pyx_arg_num) {
  int __pyx_v_num;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_node (wrapper)", 0);
  assert(__pyx_arg_num); {
    __pyx_v_num = __Pyx_PyInt_As_int(__pyx_arg_num); if (unlikely((__pyx_v_num == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 246, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_10add_node(((struct PyObject_QPBOFloat *)__pyx_v_self), ((int)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_10add_node(struct PyObject_QPBOFloat *__pyx_v_self, int __pyx_v_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_node", 0);

  /* "thinqpbo/src/_qpbo.pyx":251
 *         IMPORTANT: see note about the constructor
 *         """
 *         return self.c_qpbo.AddNode(num)             # <<<<<<<<<<<<<<
 * 
 *     def add_unary_term(self, NodeId i, float E0, float E1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_qpbo->AddNode(__pyx_v_num)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":246
 *         self.c_qpbo.Reset()
 * 
 *     def add_node(self, int num):             # <<<<<<<<<<<<<<
 *         """Adds node(s) to the graph. By default, one node is added (num=1); then first call returns 0, second call returns 1, and so on.
 *         If num>1, then several nodes are added, and NodeId of the first one is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":253
 *         return self.c_qpbo.AddNode(num)
 * 
 *     def add_unary_term(self, NodeId i, float E0, float E1):             # <<<<<<<<<<<<<<
 *         """Adds unary term Ei(x_i) to the energy function with cost values Ei(0)=E0, Ei(1)=E1.
 * 	    Can be called multiple times for each node.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_13add_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_12add_unary_term[] = "Adds unary term Ei(x_i) to the energy function with cost values Ei(0)=E0, Ei(1)=E1.\n\t    Can be called multiple times for each node.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_13add_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  float __pyx_v_E0;
  float __pyx_v_E1;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_unary_term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_E0,&__pyx_n_s_E1,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_unary_term", 1, 3, 3, 1); __PYX_ERR(1, 253, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_unary_term", 1, 3, 3, 2); __PYX_ERR(1, 253, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_unary_term") < 0)) __PYX_ERR(1, 253, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 253, __pyx_L3_error)
    __pyx_v_E0 = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_E0 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 253, __pyx_L3_error)
    __pyx_v_E1 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_E1 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 253, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_unary_term", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 253, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.add_unary_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_12add_unary_term(((struct PyObject_QPBOFloat *)__pyx_v_self), __pyx_v_i, __pyx_v_E0, __pyx_v_E1);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_12add_unary_term(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, float __pyx_v_E0, float __pyx_v_E1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_unary_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":257
 * 	    Can be called multiple times for each node.
 *         """
 *         self.c_qpbo.AddUnaryTerm(i, E0, E1)             # <<<<<<<<<<<<<<
 * 
 *     def add_pairwise_term(self, NodeId i, NodeId j, float E00, float E01, float E10, float E11):
 */
  __pyx_v_self->c_qpbo->AddUnaryTerm(__pyx_v_i, __pyx_v_E0, __pyx_v_E1);

  /* "thinqpbo/src/_qpbo.pyx":253
 *         return self.c_qpbo.AddNode(num)
 * 
 *     def add_unary_term(self, NodeId i, float E0, float E1):             # <<<<<<<<<<<<<<
 *         """Adds unary term Ei(x_i) to the energy function with cost values Ei(0)=E0, Ei(1)=E1.
 * 	    Can be called multiple times for each node.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":259
 *         self.c_qpbo.AddUnaryTerm(i, E0, E1)
 * 
 *     def add_pairwise_term(self, NodeId i, NodeId j, float E00, float E01, float E10, float E11):             # <<<<<<<<<<<<<<
 *         """Adds pairwise term Eij(x_i, x_j) with cost values E00, E01, E10, E11.
 * 	    IMPORTANT: see note about the constructor
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_15add_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_14add_pairwise_term[] = "Adds pairwise term Eij(x_i, x_j) with cost values E00, E01, E10, E11.\n\t    IMPORTANT: see note about the constructor \n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_15add_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j;
  float __pyx_v_E00;
  float __pyx_v_E01;
  float __pyx_v_E10;
  float __pyx_v_E11;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_pairwise_term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_j,&__pyx_n_s_E00,&__pyx_n_s_E01,&__pyx_n_s_E10,&__pyx_n_s_E11,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 1); __PYX_ERR(1, 259, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E00)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 2); __PYX_ERR(1, 259, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E01)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 3); __PYX_ERR(1, 259, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E10)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 4); __PYX_ERR(1, 259, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E11)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 5); __PYX_ERR(1, 259, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_pairwise_term") < 0)) __PYX_ERR(1, 259, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 259, __pyx_L3_error)
    __pyx_v_j = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 259, __pyx_L3_error)
    __pyx_v_E00 = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_E00 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 259, __pyx_L3_error)
    __pyx_v_E01 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_E01 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 259, __pyx_L3_error)
    __pyx_v_E10 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_E10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 259, __pyx_L3_error)
    __pyx_v_E11 = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_E11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 259, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 259, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.add_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_14add_pairwise_term(((struct PyObject_QPBOFloat *)__pyx_v_self), __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_14add_pairwise_term(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, float __pyx_v_E00, float __pyx_v_E01, float __pyx_v_E10, float __pyx_v_E11) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_pairwise_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":263
 * 	    IMPORTANT: see note about the constructor
 *         """
 *         return self.c_qpbo.AddPairwiseTerm(i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 * 
 *     def modify_pairwise_term(self, EdgeId e, NodeId i, NodeId j, float E00, float E01, float E10, float E11):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->c_qpbo->AddPairwiseTerm(__pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":259
 *         self.c_qpbo.AddUnaryTerm(i, E0, E1)
 * 
 *     def add_pairwise_term(self, NodeId i, NodeId j, float E00, float E01, float E10, float E11):             # <<<<<<<<<<<<<<
 *         """Adds pairwise term Eij(x_i, x_j) with cost values E00, E01, E10, E11.
 * 	    IMPORTANT: see note about the constructor
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.add_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":265
 *         return self.c_qpbo.AddPairwiseTerm(i, j, E00, E01, E10, E11)
 * 
 *     def modify_pairwise_term(self, EdgeId e, NodeId i, NodeId j, float E00, float E01, float E10, float E11):             # <<<<<<<<<<<<<<
 *         """This function modifies an already existing pairwise term.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_17modify_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_16modify_pairwise_term[] = "This function modifies an already existing pairwise term.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_17modify_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j;
  float __pyx_v_E00;
  float __pyx_v_E01;
  float __pyx_v_E10;
  float __pyx_v_E11;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modify_pairwise_term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_e,&__pyx_n_s_i,&__pyx_n_s_j,&__pyx_n_s_E00,&__pyx_n_s_E01,&__pyx_n_s_E10,&__pyx_n_s_E11,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 1); __PYX_ERR(1, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 2); __PYX_ERR(1, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E00)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 3); __PYX_ERR(1, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E01)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 4); __PYX_ERR(1, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E10)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 5); __PYX_ERR(1, 265, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E11)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 6); __PYX_ERR(1, 265, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "modify_pairwise_term") < 0)) __PYX_ERR(1, 265, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_e = __Pyx_PyInt_As_PY_LONG_LONG(values[0]); if (unlikely((__pyx_v_e == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(1, 265, __pyx_L3_error)
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 265, __pyx_L3_error)
    __pyx_v_j = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 265, __pyx_L3_error)
    __pyx_v_E00 = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_E00 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 265, __pyx_L3_error)
    __pyx_v_E01 = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_E01 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 265, __pyx_L3_error)
    __pyx_v_E10 = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_E10 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 265, __pyx_L3_error)
    __pyx_v_E11 = __pyx_PyFloat_AsFloat(values[6]); if (unlikely((__pyx_v_E11 == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 265, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 265, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.modify_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_16modify_pairwise_term(((struct PyObject_QPBOFloat *)__pyx_v_self), __pyx_v_e, __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_16modify_pairwise_term(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, float __pyx_v_E00, float __pyx_v_E01, float __pyx_v_E10, float __pyx_v_E11) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modify_pairwise_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":268
 *         """This function modifies an already existing pairwise term.
 *         """
 *         self.c_qpbo.AddPairwiseTerm(e, i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 * 
 *     def merge_parallel_edges(self):
 */
  __pyx_v_self->c_qpbo->AddPairwiseTerm(__pyx_v_e, __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* "thinqpbo/src/_qpbo.pyx":265
 *         return self.c_qpbo.AddPairwiseTerm(i, j, E00, E01, E10, E11)
 * 
 *     def modify_pairwise_term(self, EdgeId e, NodeId i, NodeId j, float E00, float E01, float E10, float E11):             # <<<<<<<<<<<<<<
 *         """This function modifies an already existing pairwise term.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":270
 *         self.c_qpbo.AddPairwiseTerm(e, i, j, E00, E01, E10, E11)
 * 
 *     def merge_parallel_edges(self):             # <<<<<<<<<<<<<<
 *         """If AddPairwiseTerm(i,j,...) has been called twice for some pairs of nodes,
 *         then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_19merge_parallel_edges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_18merge_parallel_edges[] = "If AddPairwiseTerm(i,j,...) has been called twice for some pairs of nodes,\n        then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_19merge_parallel_edges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge_parallel_edges (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_18merge_parallel_edges(((struct PyObject_QPBOFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_18merge_parallel_edges(struct PyObject_QPBOFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge_parallel_edges", 0);

  /* "thinqpbo/src/_qpbo.pyx":274
 *         then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().
 *         """
 *         self.c_qpbo.MergeParallelEdges()             # <<<<<<<<<<<<<<
 * 
 *     def get_label(self, NodeId i):
 */
  __pyx_v_self->c_qpbo->MergeParallelEdges();

  /* "thinqpbo/src/_qpbo.pyx":270
 *         self.c_qpbo.AddPairwiseTerm(e, i, j, E00, E01, E10, E11)
 * 
 *     def merge_parallel_edges(self):             # <<<<<<<<<<<<<<
 *         """If AddPairwiseTerm(i,j,...) has been called twice for some pairs of nodes,
 *         then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":276
 *         self.c_qpbo.MergeParallelEdges()
 * 
 *     def get_label(self, NodeId i):             # <<<<<<<<<<<<<<
 *         """Returns 0 or 1, if the node is labeled, and a negative number otherwise.
 * 	    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_21get_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_20get_label[] = "Returns 0 or 1, if the node is labeled, and a negative number otherwise.\n\t    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_21get_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_label (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 276, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.get_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_20get_label(((struct PyObject_QPBOFloat *)__pyx_v_self), ((__pyx_t_8thinqpbo_3src_5_qpbo_NodeId)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_20get_label(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_label", 0);

  /* "thinqpbo/src/_qpbo.pyx":280
 * 	    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().
 *         """
 *         return self.c_qpbo.GetLabel(i)             # <<<<<<<<<<<<<<
 * 
 *     def get_node_num(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_qpbo->GetLabel(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":276
 *         self.c_qpbo.MergeParallelEdges()
 * 
 *     def get_label(self, NodeId i):             # <<<<<<<<<<<<<<
 *         """Returns 0 or 1, if the node is labeled, and a negative number otherwise.
 * 	    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.get_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":282
 *         return self.c_qpbo.GetLabel(i)
 * 
 *     def get_node_num(self):             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.GetNodeNum()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_23get_node_num(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_23get_node_num(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node_num (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_22get_node_num(((struct PyObject_QPBOFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_22get_node_num(struct PyObject_QPBOFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_node_num", 0);

  /* "thinqpbo/src/_qpbo.pyx":283
 * 
 *     def get_node_num(self):
 *         return self.c_qpbo.GetNodeNum()             # <<<<<<<<<<<<<<
 * 
 *     def get_twice_unary_term(self, NodeId i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_qpbo->GetNodeNum()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 283, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":282
 *         return self.c_qpbo.GetLabel(i)
 * 
 *     def get_node_num(self):             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.GetNodeNum()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.get_node_num", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":285
 *         return self.c_qpbo.GetNodeNum()
 * 
 *     def get_twice_unary_term(self, NodeId i):             # <<<<<<<<<<<<<<
 *         cdef float E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_25get_twice_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_25get_twice_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_twice_unary_term (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 285, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.get_twice_unary_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_24get_twice_unary_term(((struct PyObject_QPBOFloat *)__pyx_v_self), ((__pyx_t_8thinqpbo_3src_5_qpbo_NodeId)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_24get_twice_unary_term(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i) {
  float __pyx_v_E0;
  float __pyx_v_E1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_twice_unary_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":287
 *     def get_twice_unary_term(self, NodeId i):
 *         cdef float E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)             # <<<<<<<<<<<<<<
 *         return (E0, E1)
 * 
 */
  __pyx_v_self->c_qpbo->GetTwiceUnaryTerm(__pyx_v_i, __pyx_v_E0, __pyx_v_E1);

  /* "thinqpbo/src/_qpbo.pyx":288
 *         cdef float E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)
 *         return (E0, E1)             # <<<<<<<<<<<<<<
 * 
 *     def get_twice_pairwise_term(self, EdgeId e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_E0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_E1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":285
 *         return self.c_qpbo.GetNodeNum()
 * 
 *     def get_twice_unary_term(self, NodeId i):             # <<<<<<<<<<<<<<
 *         cdef float E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.get_twice_unary_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":290
 *         return (E0, E1)
 * 
 *     def get_twice_pairwise_term(self, EdgeId e):             # <<<<<<<<<<<<<<
 *         cdef NodeId i, j
 *         cdef float E00, E01, E10, E11
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_27get_twice_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_e); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_27get_twice_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_e) {
  __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_twice_pairwise_term (wrapper)", 0);
  assert(__pyx_arg_e); {
    __pyx_v_e = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_arg_e); if (unlikely((__pyx_v_e == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(1, 290, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.get_twice_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_26get_twice_pairwise_term(((struct PyObject_QPBOFloat *)__pyx_v_self), ((__pyx_t_8thinqpbo_3src_5_qpbo_EdgeId)__pyx_v_e));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_26get_twice_pairwise_term(struct PyObject_QPBOFloat *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j;
  float __pyx_v_E00;
  float __pyx_v_E01;
  float __pyx_v_E10;
  float __pyx_v_E11;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("get_twice_pairwise_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":293
 *         cdef NodeId i, j
 *         cdef float E00, E01, E10, E11
 *         self.c_qpbo.GetTwicePairwiseTerm(e, i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 *         return (i, j, E00, E01, E10, E11)
 * 
 */
  __pyx_v_self->c_qpbo->GetTwicePairwiseTerm(__pyx_v_e, __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* "thinqpbo/src/_qpbo.pyx":294
 *         cdef float E00, E01, E10, E11
 *         self.c_qpbo.GetTwicePairwiseTerm(e, i, j, E00, E01, E10, E11)
 *         return (i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 * 
 *     def compute_twice_energy(self, int option=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_E00); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_E01); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_E10); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_E11); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":290
 *         return (E0, E1)
 * 
 *     def get_twice_pairwise_term(self, EdgeId e):             # <<<<<<<<<<<<<<
 *         cdef NodeId i, j
 *         cdef float E00, E01, E10, E11
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.get_twice_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":296
 *         return (i, j, E00, E01, E10, E11)
 * 
 *     def compute_twice_energy(self, int option=0):             # <<<<<<<<<<<<<<
 *         """Return energy bound.
 *         NOTE: in the current implementation Probe() may add constants to the energy
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_29compute_twice_energy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_28compute_twice_energy[] = "Return energy bound.\n        NOTE: in the current implementation Probe() may add constants to the energy\n        during transormations, so after Probe() the energy/lower bound would be shifted by some offset.\n\n        option == 0: returns 2 times the energy of internally stored solution which would be\n                    returned by GetLabel(). Negative values (unknown) are treated as 0. \n        option == 1: returns 2 times the energy of solution set by the user (via SetLabel()).\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_29compute_twice_energy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_option;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_twice_energy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_option,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_option);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_twice_energy") < 0)) __PYX_ERR(1, 296, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_option = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_option == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 296, __pyx_L3_error)
    } else {
      __pyx_v_option = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_twice_energy", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 296, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.compute_twice_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_28compute_twice_energy(((struct PyObject_QPBOFloat *)__pyx_v_self), __pyx_v_option);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_28compute_twice_energy(struct PyObject_QPBOFloat *__pyx_v_self, int __pyx_v_option) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("compute_twice_energy", 0);

  /* "thinqpbo/src/_qpbo.pyx":305
 *         option == 1: returns 2 times the energy of solution set by the user (via SetLabel()).
 *         """
 *         return self.c_qpbo.ComputeTwiceEnergy(option)             # <<<<<<<<<<<<<<
 * 
 *     def compute_twice_lower_bound(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_qpbo->ComputeTwiceEnergy(__pyx_v_option)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":296
 *         return (i, j, E00, E01, E10, E11)
 * 
 *     def compute_twice_energy(self, int option=0):             # <<<<<<<<<<<<<<
 *         """Return energy bound.
 *         NOTE: in the current implementation Probe() may add constants to the energy
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.compute_twice_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":307
 *         return self.c_qpbo.ComputeTwiceEnergy(option)
 * 
 *     def compute_twice_lower_bound(self):             # <<<<<<<<<<<<<<
 *         """Returns the lower bound defined by current reparameterizaion.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_31compute_twice_lower_bound(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_30compute_twice_lower_bound[] = "Returns the lower bound defined by current reparameterizaion.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_31compute_twice_lower_bound(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_twice_lower_bound (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_30compute_twice_lower_bound(((struct PyObject_QPBOFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_30compute_twice_lower_bound(struct PyObject_QPBOFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("compute_twice_lower_bound", 0);

  /* "thinqpbo/src/_qpbo.pyx":310
 *         """Returns the lower bound defined by current reparameterizaion.
 *         """
 *         return self.c_qpbo.ComputeTwiceLowerBound()             # <<<<<<<<<<<<<<
 * 
 *     def solve(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_qpbo->ComputeTwiceLowerBound()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":307
 *         return self.c_qpbo.ComputeTwiceEnergy(option)
 * 
 *     def compute_twice_lower_bound(self):             # <<<<<<<<<<<<<<
 *         """Returns the lower bound defined by current reparameterizaion.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.compute_twice_lower_bound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":312
 *         return self.c_qpbo.ComputeTwiceLowerBound()
 * 
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         """Runs QPBO. After calling Solve(), use GetLabel(i) to get label of node i.
 * 	    Solve() produces a STRONGLY PERSISTENT LABELING. It means, in particular,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_33solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_32solve[] = "Runs QPBO. After calling Solve(), use GetLabel(i) to get label of node i.\n\t    Solve() produces a STRONGLY PERSISTENT LABELING. It means, in particular,\n\t    that if GetLabel(i)>=0 (i.e. node i is labeled) then x_i == GetLabel(i) for ALL global minima x.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_33solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_32solve(((struct PyObject_QPBOFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_32solve(struct PyObject_QPBOFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve", 0);

  /* "thinqpbo/src/_qpbo.pyx":317
 * 	    that if GetLabel(i)>=0 (i.e. node i is labeled) then x_i == GetLabel(i) for ALL global minima x.
 *         """
 *         self.c_qpbo.Solve()             # <<<<<<<<<<<<<<
 * 
 *     def compute_weak_persistencies(self):
 */
  __pyx_v_self->c_qpbo->Solve();

  /* "thinqpbo/src/_qpbo.pyx":312
 *         return self.c_qpbo.ComputeTwiceLowerBound()
 * 
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         """Runs QPBO. After calling Solve(), use GetLabel(i) to get label of node i.
 * 	    Solve() produces a STRONGLY PERSISTENT LABELING. It means, in particular,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":319
 *         self.c_qpbo.Solve()
 * 
 *     def compute_weak_persistencies(self):             # <<<<<<<<<<<<<<
 *         """Can only be called immediately after Solve()/Probe() (and before any modifications are made to the energy).
 *         Computes WEAKLY PERSISTENT LABELING. Use GetLabel() to read the result.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_35compute_weak_persistencies(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_34compute_weak_persistencies[] = "Can only be called immediately after Solve()/Probe() (and before any modifications are made to the energy).\n        Computes WEAKLY PERSISTENT LABELING. Use GetLabel() to read the result.\n        NOTE: if the energy is submodular, then ComputeWeakPersistences() will label all nodes (in general, this is not necessarily true for Solve()).\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_35compute_weak_persistencies(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_weak_persistencies (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_34compute_weak_persistencies(((struct PyObject_QPBOFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_34compute_weak_persistencies(struct PyObject_QPBOFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_weak_persistencies", 0);

  /* "thinqpbo/src/_qpbo.pyx":324
 *         NOTE: if the energy is submodular, then ComputeWeakPersistences() will label all nodes (in general, this is not necessarily true for Solve()).
 *         """
 *         self.c_qpbo.ComputeWeakPersistencies()             # <<<<<<<<<<<<<<
 * 
 *     def stitch(self):
 */
  __pyx_v_self->c_qpbo->ComputeWeakPersistencies();

  /* "thinqpbo/src/_qpbo.pyx":319
 *         self.c_qpbo.Solve()
 * 
 *     def compute_weak_persistencies(self):             # <<<<<<<<<<<<<<
 *         """Can only be called immediately after Solve()/Probe() (and before any modifications are made to the energy).
 *         Computes WEAKLY PERSISTENT LABELING. Use GetLabel() to read the result.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":326
 *         self.c_qpbo.ComputeWeakPersistencies()
 * 
 *     def stitch(self):             # <<<<<<<<<<<<<<
 *         """GetRegion()/Stitch():
 *         ComputeWeakPersistencies() also splits pixels into regions (``strongly connected components'') U^0, U^1, ..., U^k as described in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_37stitch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_36stitch[] = "GetRegion()/Stitch():\n        ComputeWeakPersistencies() also splits pixels into regions (``strongly connected components'') U^0, U^1, ..., U^k as described in\n        \n            A. Billionnet and B. Jaumard. \n            A decomposition method for minimizing quadratic pseudoboolean functions. \n            Operation Research Letters, 8:161\357\277\275163, 1989.\t\n    \n        For a review see also \n    \n            V. Kolmogorov, C. Rother\n            Minimizing non-submodular functions with graph cuts - a review\n            Technical report MSR-TR-2006-100, July 2006. To appear in PAMI.\n    \n        Nodes in U^0 are labeled, nodes in U^1, ..., U^k are unlabeled.\n        (To find out to what region node i belongs, call GetRegion(i)).\n        The user can use these regions as follows:\n        -- For each r=1..k, compute somehow minimum x^r of the energy corresponding to region U^r.\n            This energy can be obtained by calling GetPairwiseTerm() for edges inside the region.\n            (There are no unary terms). Note that computing the global minimum is NP-hard;\n            it is up to the user to decide how to solve this problem.\n        -- Set the labeling by calling SetLabel().\n        -- Call Stitch(). It will compute a complete global minimum (in linear time).\n        -- Call GetLabel() for nodes in U^1, ..., U^k to read new solution.\n        Note that if the user can provides approximate rather than global minima x^r, then the stitching\n        can still be done but the result is not guaranteed to be a *global* minimum.\n    \n        GetRegion()/Stitch() can be called only immediately after ComputeWeakPersistencies().\n        NOTE: Stitch() changes the stored energy!\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_37stitch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stitch (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_36stitch(((struct PyObject_QPBOFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_36stitch(struct PyObject_QPBOFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stitch", 0);

  /* "thinqpbo/src/_qpbo.pyx":356
 *         NOTE: Stitch() changes the stored energy!
 *         """
 *         self.c_qpbo.Stitch()             # <<<<<<<<<<<<<<
 * 
 *     def improve(self):
 */
  __pyx_v_self->c_qpbo->Stitch();

  /* "thinqpbo/src/_qpbo.pyx":326
 *         self.c_qpbo.ComputeWeakPersistencies()
 * 
 *     def stitch(self):             # <<<<<<<<<<<<<<
 *         """GetRegion()/Stitch():
 *         ComputeWeakPersistencies() also splits pixels into regions (``strongly connected components'') U^0, U^1, ..., U^k as described in
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":358
 *         self.c_qpbo.Stitch()
 * 
 *     def improve(self):             # <<<<<<<<<<<<<<
 *         """Tries to improve the labeling provided by the user (via SetLabel()).
 *         The new labeling is guaranteed to have the same or smaller energy than the input labeling.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_39improve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_38improve[] = "Tries to improve the labeling provided by the user (via SetLabel()).\n        The new labeling is guaranteed to have the same or smaller energy than the input labeling.\n        \n        The procedure is as follows:\n        1. Run QBPO\n        2. Go through nodes in the order order_array[0], ..., order_array[N-1].\n            If a node is unlabeled, fix it to the label provided by the user and run QBPO again.\n        3. For remaining unlabeled nodes run set their labels to values provided by the user.\n            (If order_array[] contains all nodes, then there should be no unlabeled nodes in step 3).\n        \n        New labeling can be obtained via GetLabel(). (The procedure also calls SetLabel() with\n        new labels, so Improve() can be called again). Returns true if success \n        (i.e. the labeling has changed and, thus, the energy has decreased), and false otherwise.\n        \n        If array fixed_pixels of size nodeNum is provided, then it is set as follows:\n        fixed_nodes[i] = 1 if node i was fixed during Improve(), and false otherwise.\n        order_array and fixed_pixels can point to the same array.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_39improve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("improve (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_38improve(((struct PyObject_QPBOFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_38improve(struct PyObject_QPBOFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("improve", 0);

  /* "thinqpbo/src/_qpbo.pyx":377
 *         order_array and fixed_pixels can point to the same array.
 *         """
 *         return self.c_qpbo.Improve()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->c_qpbo->Improve()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":358
 *         self.c_qpbo.Stitch()
 * 
 *     def improve(self):             # <<<<<<<<<<<<<<
 *         """Tries to improve the labeling provided by the user (via SetLabel()).
 *         The new labeling is guaranteed to have the same or smaller energy than the input labeling.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.improve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_40__reduce_cython__(((struct PyObject_QPBOFloat *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_40__reduce_cython__(CYTHON_UNUSED struct PyObject_QPBOFloat *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_42__setstate_cython__(((struct PyObject_QPBOFloat *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_9QPBOFloat_42__setstate_cython__(CYTHON_UNUSED struct PyObject_QPBOFloat *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBOFloat.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":383
 *     cdef QPBO[double]* c_qpbo
 * 
 *     def __cinit__(self, int node_num_max=0, EdgeId edge_num_max=0):             # <<<<<<<<<<<<<<
 *         """Constructor.
 *         The first argument gives an estimate of the maximum number of nodes that can be added
 */

/* Python wrapper */
static int __pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_node_num_max;
  __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_edge_num_max;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_node_num_max,&__pyx_n_s_edge_num_max,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_node_num_max);
          if (value) { values[0] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_edge_num_max);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(1, 383, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_node_num_max = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_node_num_max == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 383, __pyx_L3_error)
    } else {
      __pyx_v_node_num_max = ((int)0);
    }
    if (values[1]) {
      __pyx_v_edge_num_max = __Pyx_PyInt_As_PY_LONG_LONG(values[1]); if (unlikely((__pyx_v_edge_num_max == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(1, 383, __pyx_L3_error)
    } else {
      __pyx_v_edge_num_max = ((__pyx_t_8thinqpbo_3src_5_qpbo_EdgeId)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 383, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble___cinit__(((struct PyObject_QPBODouble *)__pyx_v_self), __pyx_v_node_num_max, __pyx_v_edge_num_max);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble___cinit__(struct PyObject_QPBODouble *__pyx_v_self, int __pyx_v_node_num_max, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_edge_num_max) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  QPBO<double>  *__pyx_t_1;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "thinqpbo/src/_qpbo.pyx":401
 *         a larger value of edge_num_max (e.g. twice the number of edges in the original energy).
 *         """
 *         self.c_qpbo = new QPBO[double](node_num_max, edge_num_max)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  try {
    __pyx_t_1 = new QPBO<double> (__pyx_v_node_num_max, __pyx_v_edge_num_max);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(1, 401, __pyx_L1_error)
  }
  __pyx_v_self->c_qpbo = __pyx_t_1;

  /* "thinqpbo/src/_qpbo.pyx":383
 *     cdef QPBO[double]* c_qpbo
 * 
 *     def __cinit__(self, int node_num_max=0, EdgeId edge_num_max=0):             # <<<<<<<<<<<<<<
 *         """Constructor.
 *         The first argument gives an estimate of the maximum number of nodes that can be added
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":403
 *         self.c_qpbo = new QPBO[double](node_num_max, edge_num_max)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Destructor
 *         """
 */

/* Python wrapper */
static void __pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_2__dealloc__(((struct PyObject_QPBODouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_2__dealloc__(struct PyObject_QPBODouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "thinqpbo/src/_qpbo.pyx":406
 *         """Destructor
 *         """
 *         del self.c_qpbo             # <<<<<<<<<<<<<<
 * 
 *     def save(self, filename):
 */
  delete __pyx_v_self->c_qpbo;

  /* "thinqpbo/src/_qpbo.pyx":403
 *         self.c_qpbo = new QPBO[double](node_num_max, edge_num_max)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         """Destructor
 *         """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "thinqpbo/src/_qpbo.pyx":408
 *         del self.c_qpbo
 * 
 *     def save(self, filename):             # <<<<<<<<<<<<<<
 *         """Save current reparameterisation of the energy to a text file. (Note: possibly twice the energy is saved).
 * 	    Returns true if success, false otherwise.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_5save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_4save[] = "Save current reparameterisation of the energy to a text file. (Note: possibly twice the energy is saved).\n\t    Returns true if success, false otherwise.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_5save(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_4save(((struct PyObject_QPBODouble *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_4save(struct PyObject_QPBODouble *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_bytes = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("save", 0);

  /* "thinqpbo/src/_qpbo.pyx":412
 * 	    Returns true if success, false otherwise.
 *         """
 *         filename_bytes = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.Save(filename_bytes)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_bytes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "thinqpbo/src/_qpbo.pyx":413
 *         """
 *         filename_bytes = filename.encode('UTF-8')
 *         return self.c_qpbo.Save(filename_bytes)             # <<<<<<<<<<<<<<
 * 
 *     def load(self, filename):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_bytes); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 413, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->c_qpbo->Save(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":408
 *         del self.c_qpbo
 * 
 *     def save(self, filename):             # <<<<<<<<<<<<<<
 *         """Save current reparameterisation of the energy to a text file. (Note: possibly twice the energy is saved).
 * 	    Returns true if success, false otherwise.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_bytes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":415
 *         return self.c_qpbo.Save(filename_bytes)
 * 
 *     def load(self, filename):             # <<<<<<<<<<<<<<
 *         """Load energy from a text file. Current terms of the energy (if any) are destroyed.
 *         Type identifier in the file (int/float/double) should match the type QPBO::REAL.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_7load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_6load[] = "Load energy from a text file. Current terms of the energy (if any) are destroyed.\n        Type identifier in the file (int/float/double) should match the type QPBO::REAL.\n\t    Returns true if success, false otherwise.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_7load(PyObject *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_6load(((struct PyObject_QPBODouble *)__pyx_v_self), ((PyObject *)__pyx_v_filename));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_6load(struct PyObject_QPBODouble *__pyx_v_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_filename_bytes = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  char *__pyx_t_4;
  __Pyx_RefNannySetupContext("load", 0);

  /* "thinqpbo/src/_qpbo.pyx":420
 * 	    Returns true if success, false otherwise.
 *         """
 *         filename_bytes = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.Load(filename_bytes)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_filename, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_kp_s_UTF_8) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_kp_s_UTF_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_filename_bytes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "thinqpbo/src/_qpbo.pyx":421
 *         """
 *         filename_bytes = filename.encode('UTF-8')
 *         return self.c_qpbo.Load(filename_bytes)             # <<<<<<<<<<<<<<
 * 
 *     def reset(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = __Pyx_PyObject_AsWritableString(__pyx_v_filename_bytes); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) __PYX_ERR(1, 421, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->c_qpbo->Load(__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":415
 *         return self.c_qpbo.Save(filename_bytes)
 * 
 *     def load(self, filename):             # <<<<<<<<<<<<<<
 *         """Load energy from a text file. Current terms of the energy (if any) are destroyed.
 *         Type identifier in the file (int/float/double) should match the type QPBO::REAL.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_filename_bytes);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":423
 *         return self.c_qpbo.Load(filename_bytes)
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         """Removes all nodes and edges.
 *         After that functions AddNode(), AddUnaryTerm(), AddPairwiseTerm() must be called again.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_9reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_8reset[] = "Removes all nodes and edges. \n        After that functions AddNode(), AddUnaryTerm(), AddPairwiseTerm() must be called again. \n        \n        Advantage compared to deleting QPBO and allocating it again:\n        no calls to delete/new (which could be quite slow).\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_9reset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_8reset(((struct PyObject_QPBODouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_8reset(struct PyObject_QPBODouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reset", 0);

  /* "thinqpbo/src/_qpbo.pyx":430
 *         no calls to delete/new (which could be quite slow).
 *         """
 *         self.c_qpbo.Reset()             # <<<<<<<<<<<<<<
 * 
 *     def add_node(self, int num):
 */
  __pyx_v_self->c_qpbo->Reset();

  /* "thinqpbo/src/_qpbo.pyx":423
 *         return self.c_qpbo.Load(filename_bytes)
 * 
 *     def reset(self):             # <<<<<<<<<<<<<<
 *         """Removes all nodes and edges.
 *         After that functions AddNode(), AddUnaryTerm(), AddPairwiseTerm() must be called again.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":432
 *         self.c_qpbo.Reset()
 * 
 *     def add_node(self, int num):             # <<<<<<<<<<<<<<
 *         """Adds node(s) to the graph. By default, one node is added (num=1); then first call returns 0, second call returns 1, and so on.
 *         If num>1, then several nodes are added, and NodeId of the first one is returned.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_11add_node(PyObject *__pyx_v_self, PyObject *__pyx_arg_num); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_10add_node[] = "Adds node(s) to the graph. By default, one node is added (num=1); then first call returns 0, second call returns 1, and so on. \n        If num>1, then several nodes are added, and NodeId of the first one is returned.\n        IMPORTANT: see note about the constructor \n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_11add_node(PyObject *__pyx_v_self, PyObject *__pyx_arg_num) {
  int __pyx_v_num;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_node (wrapper)", 0);
  assert(__pyx_arg_num); {
    __pyx_v_num = __Pyx_PyInt_As_int(__pyx_arg_num); if (unlikely((__pyx_v_num == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 432, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_10add_node(((struct PyObject_QPBODouble *)__pyx_v_self), ((int)__pyx_v_num));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_10add_node(struct PyObject_QPBODouble *__pyx_v_self, int __pyx_v_num) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_node", 0);

  /* "thinqpbo/src/_qpbo.pyx":437
 *         IMPORTANT: see note about the constructor
 *         """
 *         return self.c_qpbo.AddNode(num)             # <<<<<<<<<<<<<<
 * 
 *     def add_unary_term(self, NodeId i, double E0, double E1):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_qpbo->AddNode(__pyx_v_num)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":432
 *         self.c_qpbo.Reset()
 * 
 *     def add_node(self, int num):             # <<<<<<<<<<<<<<
 *         """Adds node(s) to the graph. By default, one node is added (num=1); then first call returns 0, second call returns 1, and so on.
 *         If num>1, then several nodes are added, and NodeId of the first one is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.add_node", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":439
 *         return self.c_qpbo.AddNode(num)
 * 
 *     def add_unary_term(self, NodeId i, double E0, double E1):             # <<<<<<<<<<<<<<
 *         """Adds unary term Ei(x_i) to the energy function with cost values Ei(0)=E0, Ei(1)=E1.
 * 	    Can be called multiple times for each node.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_13add_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_12add_unary_term[] = "Adds unary term Ei(x_i) to the energy function with cost values Ei(0)=E0, Ei(1)=E1.\n\t    Can be called multiple times for each node.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_13add_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  double __pyx_v_E0;
  double __pyx_v_E1;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_unary_term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_E0,&__pyx_n_s_E1,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E0)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_unary_term", 1, 3, 3, 1); __PYX_ERR(1, 439, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_unary_term", 1, 3, 3, 2); __PYX_ERR(1, 439, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_unary_term") < 0)) __PYX_ERR(1, 439, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 439, __pyx_L3_error)
    __pyx_v_E0 = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_E0 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 439, __pyx_L3_error)
    __pyx_v_E1 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_E1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 439, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_unary_term", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 439, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.add_unary_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_12add_unary_term(((struct PyObject_QPBODouble *)__pyx_v_self), __pyx_v_i, __pyx_v_E0, __pyx_v_E1);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_12add_unary_term(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, double __pyx_v_E0, double __pyx_v_E1) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_unary_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":443
 * 	    Can be called multiple times for each node.
 *         """
 *         self.c_qpbo.AddUnaryTerm(i, E0, E1)             # <<<<<<<<<<<<<<
 * 
 *     def add_pairwise_term(self, NodeId i, NodeId j, double E00, double E01, double E10, double E11):
 */
  __pyx_v_self->c_qpbo->AddUnaryTerm(__pyx_v_i, __pyx_v_E0, __pyx_v_E1);

  /* "thinqpbo/src/_qpbo.pyx":439
 *         return self.c_qpbo.AddNode(num)
 * 
 *     def add_unary_term(self, NodeId i, double E0, double E1):             # <<<<<<<<<<<<<<
 *         """Adds unary term Ei(x_i) to the energy function with cost values Ei(0)=E0, Ei(1)=E1.
 * 	    Can be called multiple times for each node.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":445
 *         self.c_qpbo.AddUnaryTerm(i, E0, E1)
 * 
 *     def add_pairwise_term(self, NodeId i, NodeId j, double E00, double E01, double E10, double E11):             # <<<<<<<<<<<<<<
 *         """Adds pairwise term Eij(x_i, x_j) with cost values E00, E01, E10, E11.
 * 	    IMPORTANT: see note about the constructor
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_15add_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_14add_pairwise_term[] = "Adds pairwise term Eij(x_i, x_j) with cost values E00, E01, E10, E11.\n\t    IMPORTANT: see note about the constructor \n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_15add_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j;
  double __pyx_v_E00;
  double __pyx_v_E01;
  double __pyx_v_E10;
  double __pyx_v_E11;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_pairwise_term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_j,&__pyx_n_s_E00,&__pyx_n_s_E01,&__pyx_n_s_E10,&__pyx_n_s_E11,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 1); __PYX_ERR(1, 445, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E00)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 2); __PYX_ERR(1, 445, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E01)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 3); __PYX_ERR(1, 445, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E10)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 4); __PYX_ERR(1, 445, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E11)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, 5); __PYX_ERR(1, 445, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add_pairwise_term") < 0)) __PYX_ERR(1, 445, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 445, __pyx_L3_error)
    __pyx_v_j = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 445, __pyx_L3_error)
    __pyx_v_E00 = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_E00 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 445, __pyx_L3_error)
    __pyx_v_E01 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_E01 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 445, __pyx_L3_error)
    __pyx_v_E10 = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_E10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 445, __pyx_L3_error)
    __pyx_v_E11 = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_E11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 445, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_pairwise_term", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 445, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.add_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_14add_pairwise_term(((struct PyObject_QPBODouble *)__pyx_v_self), __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_14add_pairwise_term(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, double __pyx_v_E00, double __pyx_v_E01, double __pyx_v_E10, double __pyx_v_E11) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("add_pairwise_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":449
 * 	    IMPORTANT: see note about the constructor
 *         """
 *         return self.c_qpbo.AddPairwiseTerm(i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 * 
 *     def modify_pairwise_term(self, EdgeId e, NodeId i, NodeId j, double E00, double E01, double E10, double E11):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->c_qpbo->AddPairwiseTerm(__pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":445
 *         self.c_qpbo.AddUnaryTerm(i, E0, E1)
 * 
 *     def add_pairwise_term(self, NodeId i, NodeId j, double E00, double E01, double E10, double E11):             # <<<<<<<<<<<<<<
 *         """Adds pairwise term Eij(x_i, x_j) with cost values E00, E01, E10, E11.
 * 	    IMPORTANT: see note about the constructor
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.add_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":451
 *         return self.c_qpbo.AddPairwiseTerm(i, j, E00, E01, E10, E11)
 * 
 *     def modify_pairwise_term(self, EdgeId e, NodeId i, NodeId j, double E00, double E01, double E10, double E11):             # <<<<<<<<<<<<<<
 *         """This function modifies an already existing pairwise term.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_17modify_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_16modify_pairwise_term[] = "This function modifies an already existing pairwise term.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_17modify_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j;
  double __pyx_v_E00;
  double __pyx_v_E01;
  double __pyx_v_E10;
  double __pyx_v_E11;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modify_pairwise_term (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_e,&__pyx_n_s_i,&__pyx_n_s_j,&__pyx_n_s_E00,&__pyx_n_s_E01,&__pyx_n_s_E10,&__pyx_n_s_E11,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_e)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 1); __PYX_ERR(1, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_j)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 2); __PYX_ERR(1, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E00)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 3); __PYX_ERR(1, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E01)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 4); __PYX_ERR(1, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E10)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 5); __PYX_ERR(1, 451, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_E11)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, 6); __PYX_ERR(1, 451, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "modify_pairwise_term") < 0)) __PYX_ERR(1, 451, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_e = __Pyx_PyInt_As_PY_LONG_LONG(values[0]); if (unlikely((__pyx_v_e == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L3_error)
    __pyx_v_i = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L3_error)
    __pyx_v_j = __Pyx_PyInt_As_int(values[2]); if (unlikely((__pyx_v_j == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L3_error)
    __pyx_v_E00 = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_E00 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L3_error)
    __pyx_v_E01 = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_E01 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L3_error)
    __pyx_v_E10 = __pyx_PyFloat_AsDouble(values[5]); if (unlikely((__pyx_v_E10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L3_error)
    __pyx_v_E11 = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_E11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 451, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("modify_pairwise_term", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 451, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.modify_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_16modify_pairwise_term(((struct PyObject_QPBODouble *)__pyx_v_self), __pyx_v_e, __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_16modify_pairwise_term(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j, double __pyx_v_E00, double __pyx_v_E01, double __pyx_v_E10, double __pyx_v_E11) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("modify_pairwise_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":454
 *         """This function modifies an already existing pairwise term.
 *         """
 *         self.c_qpbo.AddPairwiseTerm(e, i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 * 
 *     def merge_parallel_edges(self):
 */
  __pyx_v_self->c_qpbo->AddPairwiseTerm(__pyx_v_e, __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* "thinqpbo/src/_qpbo.pyx":451
 *         return self.c_qpbo.AddPairwiseTerm(i, j, E00, E01, E10, E11)
 * 
 *     def modify_pairwise_term(self, EdgeId e, NodeId i, NodeId j, double E00, double E01, double E10, double E11):             # <<<<<<<<<<<<<<
 *         """This function modifies an already existing pairwise term.
 *         """
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":456
 *         self.c_qpbo.AddPairwiseTerm(e, i, j, E00, E01, E10, E11)
 * 
 *     def merge_parallel_edges(self):             # <<<<<<<<<<<<<<
 *         """If AddPairwiseTerm(i,j,...) has been called twice for some pairs of nodes,
 *         then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_19merge_parallel_edges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_18merge_parallel_edges[] = "If AddPairwiseTerm(i,j,...) has been called twice for some pairs of nodes,\n        then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_19merge_parallel_edges(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge_parallel_edges (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_18merge_parallel_edges(((struct PyObject_QPBODouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_18merge_parallel_edges(struct PyObject_QPBODouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("merge_parallel_edges", 0);

  /* "thinqpbo/src/_qpbo.pyx":460
 *         then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().
 *         """
 *         self.c_qpbo.MergeParallelEdges()             # <<<<<<<<<<<<<<
 * 
 *     def get_label(self, NodeId i):
 */
  __pyx_v_self->c_qpbo->MergeParallelEdges();

  /* "thinqpbo/src/_qpbo.pyx":456
 *         self.c_qpbo.AddPairwiseTerm(e, i, j, E00, E01, E10, E11)
 * 
 *     def merge_parallel_edges(self):             # <<<<<<<<<<<<<<
 *         """If AddPairwiseTerm(i,j,...) has been called twice for some pairs of nodes,
 *         then MergeParallelEdges() must be called before calling Solve()/Probe()/Improve().
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":462
 *         self.c_qpbo.MergeParallelEdges()
 * 
 *     def get_label(self, NodeId i):             # <<<<<<<<<<<<<<
 *         """Returns 0 or 1, if the node is labeled, and a negative number otherwise.
 * 	    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_21get_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_20get_label[] = "Returns 0 or 1, if the node is labeled, and a negative number otherwise.\n\t    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_21get_label(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_label (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 462, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.get_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_20get_label(((struct PyObject_QPBODouble *)__pyx_v_self), ((__pyx_t_8thinqpbo_3src_5_qpbo_NodeId)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_20get_label(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_label", 0);

  /* "thinqpbo/src/_qpbo.pyx":466
 * 	    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().
 *         """
 *         return self.c_qpbo.GetLabel(i)             # <<<<<<<<<<<<<<
 * 
 *     def get_node_num(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_qpbo->GetLabel(__pyx_v_i)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":462
 *         self.c_qpbo.MergeParallelEdges()
 * 
 *     def get_label(self, NodeId i):             # <<<<<<<<<<<<<<
 *         """Returns 0 or 1, if the node is labeled, and a negative number otherwise.
 * 	    Can be called after Solve()/ComputeWeakPersistencies()/Probe()/Improve().
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.get_label", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":468
 *         return self.c_qpbo.GetLabel(i)
 * 
 *     def get_node_num(self):             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.GetNodeNum()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_23get_node_num(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_23get_node_num(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_node_num (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_22get_node_num(((struct PyObject_QPBODouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_22get_node_num(struct PyObject_QPBODouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_node_num", 0);

  /* "thinqpbo/src/_qpbo.pyx":469
 * 
 *     def get_node_num(self):
 *         return self.c_qpbo.GetNodeNum()             # <<<<<<<<<<<<<<
 * 
 *     def get_twice_unary_term(self, NodeId i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c_qpbo->GetNodeNum()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":468
 *         return self.c_qpbo.GetLabel(i)
 * 
 *     def get_node_num(self):             # <<<<<<<<<<<<<<
 *         return self.c_qpbo.GetNodeNum()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.get_node_num", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":471
 *         return self.c_qpbo.GetNodeNum()
 * 
 *     def get_twice_unary_term(self, NodeId i):             # <<<<<<<<<<<<<<
 *         cdef double E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_25get_twice_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_25get_twice_unary_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_twice_unary_term (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 471, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.get_twice_unary_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_24get_twice_unary_term(((struct PyObject_QPBODouble *)__pyx_v_self), ((__pyx_t_8thinqpbo_3src_5_qpbo_NodeId)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_24get_twice_unary_term(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i) {
  double __pyx_v_E0;
  double __pyx_v_E1;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("get_twice_unary_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":473
 *     def get_twice_unary_term(self, NodeId i):
 *         cdef double E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)             # <<<<<<<<<<<<<<
 *         return (E0, E1)
 * 
 */
  __pyx_v_self->c_qpbo->GetTwiceUnaryTerm(__pyx_v_i, __pyx_v_E0, __pyx_v_E1);

  /* "thinqpbo/src/_qpbo.pyx":474
 *         cdef double E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)
 *         return (E0, E1)             # <<<<<<<<<<<<<<
 * 
 *     def get_twice_pairwise_term(self, EdgeId e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_E0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_E1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":471
 *         return self.c_qpbo.GetNodeNum()
 * 
 *     def get_twice_unary_term(self, NodeId i):             # <<<<<<<<<<<<<<
 *         cdef double E0, E1
 *         self.c_qpbo.GetTwiceUnaryTerm(i, E0, E1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.get_twice_unary_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":476
 *         return (E0, E1)
 * 
 *     def get_twice_pairwise_term(self, EdgeId e):             # <<<<<<<<<<<<<<
 *         cdef NodeId i, j
 *         cdef double E00, E01, E10, E11
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_27get_twice_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_e); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_27get_twice_pairwise_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_e) {
  __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_twice_pairwise_term (wrapper)", 0);
  assert(__pyx_arg_e); {
    __pyx_v_e = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_arg_e); if (unlikely((__pyx_v_e == (PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(1, 476, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.get_twice_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_26get_twice_pairwise_term(((struct PyObject_QPBODouble *)__pyx_v_self), ((__pyx_t_8thinqpbo_3src_5_qpbo_EdgeId)__pyx_v_e));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_26get_twice_pairwise_term(struct PyObject_QPBODouble *__pyx_v_self, __pyx_t_8thinqpbo_3src_5_qpbo_EdgeId __pyx_v_e) {
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_i;
  __pyx_t_8thinqpbo_3src_5_qpbo_NodeId __pyx_v_j;
  double __pyx_v_E00;
  double __pyx_v_E01;
  double __pyx_v_E10;
  double __pyx_v_E11;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("get_twice_pairwise_term", 0);

  /* "thinqpbo/src/_qpbo.pyx":479
 *         cdef NodeId i, j
 *         cdef double E00, E01, E10, E11
 *         self.c_qpbo.GetTwicePairwiseTerm(e, i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 *         return (i, j, E00, E01, E10, E11)
 * 
 */
  __pyx_v_self->c_qpbo->GetTwicePairwiseTerm(__pyx_v_e, __pyx_v_i, __pyx_v_j, __pyx_v_E00, __pyx_v_E01, __pyx_v_E10, __pyx_v_E11);

  /* "thinqpbo/src/_qpbo.pyx":480
 *         cdef double E00, E01, E10, E11
 *         self.c_qpbo.GetTwicePairwiseTerm(e, i, j, E00, E01, E10, E11)
 *         return (i, j, E00, E01, E10, E11)             # <<<<<<<<<<<<<<
 * 
 *     def compute_twice_energy(self, int option=0):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_j); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_E00); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_E01); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_E10); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_E11); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_7, 5, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":476
 *         return (E0, E1)
 * 
 *     def get_twice_pairwise_term(self, EdgeId e):             # <<<<<<<<<<<<<<
 *         cdef NodeId i, j
 *         cdef double E00, E01, E10, E11
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.get_twice_pairwise_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":482
 *         return (i, j, E00, E01, E10, E11)
 * 
 *     def compute_twice_energy(self, int option=0):             # <<<<<<<<<<<<<<
 *         """Return energy bound.
 *         NOTE: in the current implementation Probe() may add constants to the energy
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_29compute_twice_energy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_28compute_twice_energy[] = "Return energy bound.\n        NOTE: in the current implementation Probe() may add constants to the energy\n        during transormations, so after Probe() the energy/lower bound would be shifted by some offset.\n\n        option == 0: returns 2 times the energy of internally stored solution which would be\n                    returned by GetLabel(). Negative values (unknown) are treated as 0. \n        option == 1: returns 2 times the energy of solution set by the user (via SetLabel()).\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_29compute_twice_energy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_option;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_twice_energy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_option,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_option);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_twice_energy") < 0)) __PYX_ERR(1, 482, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_option = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_option == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 482, __pyx_L3_error)
    } else {
      __pyx_v_option = ((int)0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_twice_energy", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 482, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.compute_twice_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_28compute_twice_energy(((struct PyObject_QPBODouble *)__pyx_v_self), __pyx_v_option);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_28compute_twice_energy(struct PyObject_QPBODouble *__pyx_v_self, int __pyx_v_option) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("compute_twice_energy", 0);

  /* "thinqpbo/src/_qpbo.pyx":491
 *         option == 1: returns 2 times the energy of solution set by the user (via SetLabel()).
 *         """
 *         return self.c_qpbo.ComputeTwiceEnergy(option)             # <<<<<<<<<<<<<<
 * 
 *     def compute_twice_lower_bound(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_qpbo->ComputeTwiceEnergy(__pyx_v_option)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":482
 *         return (i, j, E00, E01, E10, E11)
 * 
 *     def compute_twice_energy(self, int option=0):             # <<<<<<<<<<<<<<
 *         """Return energy bound.
 *         NOTE: in the current implementation Probe() may add constants to the energy
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.compute_twice_energy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":493
 *         return self.c_qpbo.ComputeTwiceEnergy(option)
 * 
 *     def compute_twice_lower_bound(self):             # <<<<<<<<<<<<<<
 *         """Returns the lower bound defined by current reparameterizaion.
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_31compute_twice_lower_bound(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_30compute_twice_lower_bound[] = "Returns the lower bound defined by current reparameterizaion.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_31compute_twice_lower_bound(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_twice_lower_bound (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_30compute_twice_lower_bound(((struct PyObject_QPBODouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_30compute_twice_lower_bound(struct PyObject_QPBODouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("compute_twice_lower_bound", 0);

  /* "thinqpbo/src/_qpbo.pyx":496
 *         """Returns the lower bound defined by current reparameterizaion.
 *         """
 *         return self.c_qpbo.ComputeTwiceLowerBound()             # <<<<<<<<<<<<<<
 * 
 *     def solve(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c_qpbo->ComputeTwiceLowerBound()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":493
 *         return self.c_qpbo.ComputeTwiceEnergy(option)
 * 
 *     def compute_twice_lower_bound(self):             # <<<<<<<<<<<<<<
 *         """Returns the lower bound defined by current reparameterizaion.
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.compute_twice_lower_bound", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":498
 *         return self.c_qpbo.ComputeTwiceLowerBound()
 * 
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         """Runs QPBO. After calling Solve(), use GetLabel(i) to get label of node i.
 * 	    Solve() produces a STRONGLY PERSISTENT LABELING. It means, in particular,
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_33solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_32solve[] = "Runs QPBO. After calling Solve(), use GetLabel(i) to get label of node i.\n\t    Solve() produces a STRONGLY PERSISTENT LABELING. It means, in particular,\n\t    that if GetLabel(i)>=0 (i.e. node i is labeled) then x_i == GetLabel(i) for ALL global minima x.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_33solve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_32solve(((struct PyObject_QPBODouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_32solve(struct PyObject_QPBODouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve", 0);

  /* "thinqpbo/src/_qpbo.pyx":503
 * 	    that if GetLabel(i)>=0 (i.e. node i is labeled) then x_i == GetLabel(i) for ALL global minima x.
 *         """
 *         self.c_qpbo.Solve()             # <<<<<<<<<<<<<<
 * 
 *     def compute_weak_persistencies(self):
 */
  __pyx_v_self->c_qpbo->Solve();

  /* "thinqpbo/src/_qpbo.pyx":498
 *         return self.c_qpbo.ComputeTwiceLowerBound()
 * 
 *     def solve(self):             # <<<<<<<<<<<<<<
 *         """Runs QPBO. After calling Solve(), use GetLabel(i) to get label of node i.
 * 	    Solve() produces a STRONGLY PERSISTENT LABELING. It means, in particular,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":505
 *         self.c_qpbo.Solve()
 * 
 *     def compute_weak_persistencies(self):             # <<<<<<<<<<<<<<
 *         """Can only be called immediately after Solve()/Probe() (and before any modifications are made to the energy).
 *         Computes WEAKLY PERSISTENT LABELING. Use GetLabel() to read the result.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_35compute_weak_persistencies(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_34compute_weak_persistencies[] = "Can only be called immediately after Solve()/Probe() (and before any modifications are made to the energy).\n        Computes WEAKLY PERSISTENT LABELING. Use GetLabel() to read the result.\n        NOTE: if the energy is submodular, then ComputeWeakPersistences() will label all nodes (in general, this is not necessarily true for Solve()).\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_35compute_weak_persistencies(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_weak_persistencies (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_34compute_weak_persistencies(((struct PyObject_QPBODouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_34compute_weak_persistencies(struct PyObject_QPBODouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_weak_persistencies", 0);

  /* "thinqpbo/src/_qpbo.pyx":510
 *         NOTE: if the energy is submodular, then ComputeWeakPersistences() will label all nodes (in general, this is not necessarily true for Solve()).
 *         """
 *         self.c_qpbo.ComputeWeakPersistencies()             # <<<<<<<<<<<<<<
 * 
 *     def stitch(self):
 */
  __pyx_v_self->c_qpbo->ComputeWeakPersistencies();

  /* "thinqpbo/src/_qpbo.pyx":505
 *         self.c_qpbo.Solve()
 * 
 *     def compute_weak_persistencies(self):             # <<<<<<<<<<<<<<
 *         """Can only be called immediately after Solve()/Probe() (and before any modifications are made to the energy).
 *         Computes WEAKLY PERSISTENT LABELING. Use GetLabel() to read the result.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":512
 *         self.c_qpbo.ComputeWeakPersistencies()
 * 
 *     def stitch(self):             # <<<<<<<<<<<<<<
 *         """GetRegion()/Stitch():
 *         ComputeWeakPersistencies() also splits pixels into regions (``strongly connected components'') U^0, U^1, ..., U^k as described in
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_37stitch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_36stitch[] = "GetRegion()/Stitch():\n        ComputeWeakPersistencies() also splits pixels into regions (``strongly connected components'') U^0, U^1, ..., U^k as described in\n        \n            A. Billionnet and B. Jaumard. \n            A decomposition method for minimizing quadratic pseudoboolean functions. \n            Operation Research Letters, 8:161\357\277\275163, 1989.\t\n    \n        For a review see also \n    \n            V. Kolmogorov, C. Rother\n            Minimizing non-submodular functions with graph cuts - a review\n            Technical report MSR-TR-2006-100, July 2006. To appear in PAMI.\n    \n        Nodes in U^0 are labeled, nodes in U^1, ..., U^k are unlabeled.\n        (To find out to what region node i belongs, call GetRegion(i)).\n        The user can use these regions as follows:\n        -- For each r=1..k, compute somehow minimum x^r of the energy corresponding to region U^r.\n            This energy can be obtained by calling GetPairwiseTerm() for edges inside the region.\n            (There are no unary terms). Note that computing the global minimum is NP-hard;\n            it is up to the user to decide how to solve this problem.\n        -- Set the labeling by calling SetLabel().\n        -- Call Stitch(). It will compute a complete global minimum (in linear time).\n        -- Call GetLabel() for nodes in U^1, ..., U^k to read new solution.\n        Note that if the user can provides approximate rather than global minima x^r, then the stitching\n        can still be done but the result is not guaranteed to be a *global* minimum.\n    \n        GetRegion()/Stitch() can be called only immediately after ComputeWeakPersistencies().\n        NOTE: Stitch() changes the stored energy!\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_37stitch(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stitch (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_36stitch(((struct PyObject_QPBODouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_36stitch(struct PyObject_QPBODouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stitch", 0);

  /* "thinqpbo/src/_qpbo.pyx":542
 *         NOTE: Stitch() changes the stored energy!
 *         """
 *         self.c_qpbo.Stitch()             # <<<<<<<<<<<<<<
 * 
 *     def improve(self):
 */
  __pyx_v_self->c_qpbo->Stitch();

  /* "thinqpbo/src/_qpbo.pyx":512
 *         self.c_qpbo.ComputeWeakPersistencies()
 * 
 *     def stitch(self):             # <<<<<<<<<<<<<<
 *         """GetRegion()/Stitch():
 *         ComputeWeakPersistencies() also splits pixels into regions (``strongly connected components'') U^0, U^1, ..., U^k as described in
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "thinqpbo/src/_qpbo.pyx":544
 *         self.c_qpbo.Stitch()
 * 
 *     def improve(self):             # <<<<<<<<<<<<<<
 *         """Tries to improve the labeling provided by the user (via SetLabel()).
 *         The new labeling is guaranteed to have the same or smaller energy than the input labeling.
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_39improve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_38improve[] = "Tries to improve the labeling provided by the user (via SetLabel()).\n        The new labeling is guaranteed to have the same or smaller energy than the input labeling.\n        \n        The procedure is as follows:\n        1. Run QBPO\n        2. Go through nodes in the order order_array[0], ..., order_array[N-1].\n            If a node is unlabeled, fix it to the label provided by the user and run QBPO again.\n        3. For remaining unlabeled nodes run set their labels to values provided by the user.\n            (If order_array[] contains all nodes, then there should be no unlabeled nodes in step 3).\n        \n        New labeling can be obtained via GetLabel(). (The procedure also calls SetLabel() with\n        new labels, so Improve() can be called again). Returns true if success \n        (i.e. the labeling has changed and, thus, the energy has decreased), and false otherwise.\n        \n        If array fixed_pixels of size nodeNum is provided, then it is set as follows:\n        fixed_nodes[i] = 1 if node i was fixed during Improve(), and false otherwise.\n        order_array and fixed_pixels can point to the same array.\n        ";
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_39improve(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("improve (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_38improve(((struct PyObject_QPBODouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_38improve(struct PyObject_QPBODouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("improve", 0);

  /* "thinqpbo/src/_qpbo.pyx":563
 *         order_array and fixed_pixels can point to the same array.
 *         """
 *         return self.c_qpbo.Improve()             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->c_qpbo->Improve()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "thinqpbo/src/_qpbo.pyx":544
 *         self.c_qpbo.Stitch()
 * 
 *     def improve(self):             # <<<<<<<<<<<<<<
 *         """Tries to improve the labeling provided by the user (via SetLabel()).
 *         The new labeling is guaranteed to have the same or smaller energy than the input labeling.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.improve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_41__reduce_cython__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_40__reduce_cython__(((struct PyObject_QPBODouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_40__reduce_cython__(CYTHON_UNUSED struct PyObject_QPBODouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

/* Python wrapper */
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state); /*proto*/
static PyObject *__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_43__setstate_cython__(PyObject *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  __pyx_r = __pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_42__setstate_cython__(((struct PyObject_QPBODouble *)__pyx_v_self), ((PyObject *)__pyx_v___pyx_state));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_8thinqpbo_5_qpbo_10QPBODouble_42__setstate_cython__(CYTHON_UNUSED struct PyObject_QPBODouble *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(0, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("thinqpbo._qpbo.QPBODouble.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_8thinqpbo_5_qpbo_QPBOInt(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8thinqpbo_5_qpbo_QPBOInt(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8thinqpbo_5_qpbo_QPBOInt[] = {
  {"save", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_5save, METH_O, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_4save},
  {"load", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_7load, METH_O, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_6load},
  {"reset", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_9reset, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_8reset},
  {"add_node", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_11add_node, METH_O, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_10add_node},
  {"add_unary_term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_13add_unary_term, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_12add_unary_term},
  {"add_pairwise_term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_15add_pairwise_term, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_14add_pairwise_term},
  {"modify_pairwise_term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_17modify_pairwise_term, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_16modify_pairwise_term},
  {"merge_parallel_edges", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_19merge_parallel_edges, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_18merge_parallel_edges},
  {"get_label", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_21get_label, METH_O, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_20get_label},
  {"setlabel", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_23setlabel, METH_VARARGS|METH_KEYWORDS, 0},
  {"get_node_num", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_25get_node_num, METH_NOARGS, 0},
  {"get_twice_unary_term", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_27get_twice_unary_term, METH_O, 0},
  {"get_twice_pairwise_term", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_29get_twice_pairwise_term, METH_O, 0},
  {"compute_twice_energy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_31compute_twice_energy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_30compute_twice_energy},
  {"compute_twice_lower_bound", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_33compute_twice_lower_bound, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_32compute_twice_lower_bound},
  {"solve", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_35solve, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_34solve},
  {"compute_weak_persistencies", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_37compute_weak_persistencies, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_36compute_weak_persistencies},
  {"stitch", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_39stitch, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_38stitch},
  {"improve", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_41improve, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_7QPBOInt_40improve},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_43__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_7QPBOInt_45__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

DL_EXPORT(PyTypeObject) QPBOInt = {
  PyVarObject_HEAD_INIT(0, 0)
  "thinqpbo._qpbo.QPBOInt", /*tp_name*/
  sizeof(struct PyObject_QPBOInt), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8thinqpbo_5_qpbo_QPBOInt, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8thinqpbo_5_qpbo_QPBOInt, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8thinqpbo_5_qpbo_QPBOInt, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8thinqpbo_5_qpbo_QPBOFloat(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8thinqpbo_5_qpbo_QPBOFloat(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8thinqpbo_5_qpbo_QPBOFloat[] = {
  {"save", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_5save, METH_O, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_4save},
  {"load", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_7load, METH_O, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_6load},
  {"reset", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_9reset, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_8reset},
  {"add_node", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_11add_node, METH_O, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_10add_node},
  {"add_unary_term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_13add_unary_term, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_12add_unary_term},
  {"add_pairwise_term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_15add_pairwise_term, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_14add_pairwise_term},
  {"modify_pairwise_term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_17modify_pairwise_term, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_16modify_pairwise_term},
  {"merge_parallel_edges", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_19merge_parallel_edges, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_18merge_parallel_edges},
  {"get_label", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_21get_label, METH_O, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_20get_label},
  {"get_node_num", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_23get_node_num, METH_NOARGS, 0},
  {"get_twice_unary_term", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_25get_twice_unary_term, METH_O, 0},
  {"get_twice_pairwise_term", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_27get_twice_pairwise_term, METH_O, 0},
  {"compute_twice_energy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_29compute_twice_energy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_28compute_twice_energy},
  {"compute_twice_lower_bound", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_31compute_twice_lower_bound, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_30compute_twice_lower_bound},
  {"solve", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_33solve, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_32solve},
  {"compute_weak_persistencies", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_35compute_weak_persistencies, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_34compute_weak_persistencies},
  {"stitch", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_37stitch, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_36stitch},
  {"improve", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_39improve, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_9QPBOFloat_38improve},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_41__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_9QPBOFloat_43__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

DL_EXPORT(PyTypeObject) QPBOFloat = {
  PyVarObject_HEAD_INIT(0, 0)
  "thinqpbo._qpbo.QPBOFloat", /*tp_name*/
  sizeof(struct PyObject_QPBOFloat), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8thinqpbo_5_qpbo_QPBOFloat, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8thinqpbo_5_qpbo_QPBOFloat, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8thinqpbo_5_qpbo_QPBOFloat, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyObject *__pyx_tp_new_8thinqpbo_5_qpbo_QPBODouble(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_8thinqpbo_5_qpbo_QPBODouble(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely(PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE) && Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_8thinqpbo_5_qpbo_QPBODouble[] = {
  {"save", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_5save, METH_O, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_4save},
  {"load", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_7load, METH_O, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_6load},
  {"reset", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_9reset, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_8reset},
  {"add_node", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_11add_node, METH_O, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_10add_node},
  {"add_unary_term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_13add_unary_term, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_12add_unary_term},
  {"add_pairwise_term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_15add_pairwise_term, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_14add_pairwise_term},
  {"modify_pairwise_term", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_17modify_pairwise_term, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_16modify_pairwise_term},
  {"merge_parallel_edges", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_19merge_parallel_edges, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_18merge_parallel_edges},
  {"get_label", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_21get_label, METH_O, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_20get_label},
  {"get_node_num", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_23get_node_num, METH_NOARGS, 0},
  {"get_twice_unary_term", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_25get_twice_unary_term, METH_O, 0},
  {"get_twice_pairwise_term", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_27get_twice_pairwise_term, METH_O, 0},
  {"compute_twice_energy", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_29compute_twice_energy, METH_VARARGS|METH_KEYWORDS, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_28compute_twice_energy},
  {"compute_twice_lower_bound", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_31compute_twice_lower_bound, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_30compute_twice_lower_bound},
  {"solve", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_33solve, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_32solve},
  {"compute_weak_persistencies", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_35compute_weak_persistencies, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_34compute_weak_persistencies},
  {"stitch", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_37stitch, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_36stitch},
  {"improve", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_39improve, METH_NOARGS, __pyx_doc_8thinqpbo_5_qpbo_10QPBODouble_38improve},
  {"__reduce_cython__", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_41__reduce_cython__, METH_NOARGS, 0},
  {"__setstate_cython__", (PyCFunction)__pyx_pw_8thinqpbo_5_qpbo_10QPBODouble_43__setstate_cython__, METH_O, 0},
  {0, 0, 0, 0}
};

DL_EXPORT(PyTypeObject) QPBODouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "thinqpbo._qpbo.QPBODouble", /*tp_name*/
  sizeof(struct PyObject_QPBODouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_8thinqpbo_5_qpbo_QPBODouble, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_8thinqpbo_5_qpbo_QPBODouble, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_8thinqpbo_5_qpbo_QPBODouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec__qpbo(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec__qpbo},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "_qpbo",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_E0, __pyx_k_E0, sizeof(__pyx_k_E0), 0, 0, 1, 1},
  {&__pyx_n_s_E00, __pyx_k_E00, sizeof(__pyx_k_E00), 0, 0, 1, 1},
  {&__pyx_n_s_E01, __pyx_k_E01, sizeof(__pyx_k_E01), 0, 0, 1, 1},
  {&__pyx_n_s_E1, __pyx_k_E1, sizeof(__pyx_k_E1), 0, 0, 1, 1},
  {&__pyx_n_s_E10, __pyx_k_E10, sizeof(__pyx_k_E10), 0, 0, 1, 1},
  {&__pyx_n_s_E11, __pyx_k_E11, sizeof(__pyx_k_E11), 0, 0, 1, 1},
  {&__pyx_n_s_QPBODouble, __pyx_k_QPBODouble, sizeof(__pyx_k_QPBODouble), 0, 0, 1, 1},
  {&__pyx_n_s_QPBOFloat, __pyx_k_QPBOFloat, sizeof(__pyx_k_QPBOFloat), 0, 0, 1, 1},
  {&__pyx_n_s_QPBOInt, __pyx_k_QPBOInt, sizeof(__pyx_k_QPBOInt), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_UTF_8, __pyx_k_UTF_8, sizeof(__pyx_k_UTF_8), 0, 0, 1, 0},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_edge_num_max, __pyx_k_edge_num_max, sizeof(__pyx_k_edge_num_max), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
  {&__pyx_n_s_node_num_max, __pyx_k_node_num_max, sizeof(__pyx_k_node_num_max), 0, 0, 1, 1},
  {&__pyx_n_s_option, __pyx_k_option, sizeof(__pyx_k_option), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 2, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple_)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__3)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "(tree fragment)":4
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError("no default __reduce__ due to non-trivial __cinit__")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_no_default___reduce___due_to_non); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  if (PyType_Ready(&QPBOInt) < 0) __PYX_ERR(1, 6, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  QPBOInt.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!QPBOInt.tp_dictoffset && QPBOInt.tp_getattro == PyObject_GenericGetAttr)) {
    QPBOInt.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_QPBOInt, (PyObject *)&QPBOInt) < 0) __PYX_ERR(1, 6, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&QPBOInt) < 0) __PYX_ERR(1, 6, __pyx_L1_error)
  __pyx_ptype_8thinqpbo_5_qpbo_QPBOInt = &QPBOInt;
  if (PyType_Ready(&QPBOFloat) < 0) __PYX_ERR(1, 194, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  QPBOFloat.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!QPBOFloat.tp_dictoffset && QPBOFloat.tp_getattro == PyObject_GenericGetAttr)) {
    QPBOFloat.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_QPBOFloat, (PyObject *)&QPBOFloat) < 0) __PYX_ERR(1, 194, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&QPBOFloat) < 0) __PYX_ERR(1, 194, __pyx_L1_error)
  __pyx_ptype_8thinqpbo_5_qpbo_QPBOFloat = &QPBOFloat;
  if (PyType_Ready(&QPBODouble) < 0) __PYX_ERR(1, 380, __pyx_L1_error)
  #if PY_VERSION_HEX < 0x030800B1
  QPBODouble.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!QPBODouble.tp_dictoffset && QPBODouble.tp_getattro == PyObject_GenericGetAttr)) {
    QPBODouble.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_QPBODouble, (PyObject *)&QPBODouble) < 0) __PYX_ERR(1, 380, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject*)&QPBODouble) < 0) __PYX_ERR(1, 380, __pyx_L1_error)
  __pyx_ptype_8thinqpbo_5_qpbo_QPBODouble = &QPBODouble;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION < 3
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC void
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#else
#ifdef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC init_qpbo(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC init_qpbo(void)
#else
__Pyx_PyMODINIT_FUNC PyInit__qpbo(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit__qpbo(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec__qpbo(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module '_qpbo' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit__qpbo(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_qpbo", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_thinqpbo___qpbo) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "thinqpbo._qpbo")) {
      if (unlikely(PyDict_SetItemString(modules, "thinqpbo._qpbo", __pyx_m) < 0)) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) goto __pyx_L1_error;
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) goto __pyx_L1_error;
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely(__Pyx_modinit_type_init_code() != 0)) goto __pyx_L1_error;
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "thinqpbo/src/_qpbo.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * from .src._qpbo cimport QPBO, EdgeId, NodeId
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init thinqpbo._qpbo", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init thinqpbo._qpbo");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (PyCFunction_GET_FLAGS(func) & METH_FASTCALL) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, attr_name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(attr_name));
#endif
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStr(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred())
        PyErr_Format(PyExc_RuntimeError, "Unable to initialize pickling for %s", ((PyTypeObject*)type_obj)->tp_name);
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) ((PY_LONG_LONG) 0 - (PY_LONG_LONG) 1), const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) ((int) 0 - (int) 1), const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) ((PY_LONG_LONG) 0 - (PY_LONG_LONG) 1), const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (PY_LONG_LONG) -1;
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) ((long) 0 - (long) 1), const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
